(()=>{var __webpack_modules__={698:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n;// CONCATENATED MODULE: ./node_modules/d3-axis/src/identity.js\n/* harmony default export */ function src_identity(x) {\n  return x;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-axis/src/axis.js\n\n\nvar axis_top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return "translate(" + x + ",0)";\n}\n\nfunction translateY(y) {\n  return "translate(0," + y + ")";\n}\n\nfunction number(scale) {\n  return d => +scale(d);\n}\n\nfunction center(scale, offset) {\n  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;\n  if (scale.round()) offset = Math.round(offset);\n  return d => +scale(d) + offset;\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,\n      k = orient === axis_top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? "x" : "y",\n      transform = orient === axis_top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : src_identity) : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + offset,\n        range1 = +range[range.length - 1] + offset,\n        position = (scale.bandwidth ? center : number)(scale.copy(), offset),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(".domain").data([null]),\n        tick = selection.selectAll(".tick").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append("g").attr("class", "tick"),\n        line = tick.select("line"),\n        text = tick.select("text");\n\n    path = path.merge(path.enter().insert("path", ".tick")\n        .attr("class", "domain")\n        .attr("stroke", "currentColor"));\n\n    tick = tick.merge(tickEnter);\n\n    line = line.merge(tickEnter.append("line")\n        .attr("stroke", "currentColor")\n        .attr(x + "2", k * tickSizeInner));\n\n    text = text.merge(tickEnter.append("text")\n        .attr("fill", "currentColor")\n        .attr(x, k * spacing)\n        .attr("dy", orient === axis_top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n\n      tickExit = tickExit.transition(context)\n          .attr("opacity", epsilon)\n          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform"); });\n\n      tickEnter\n          .attr("opacity", epsilon)\n          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });\n    }\n\n    tickExit.remove();\n\n    path\n        .attr("d", orient === left || orient === right\n            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1)\n            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1));\n\n    tick\n        .attr("opacity", 1)\n        .attr("transform", function(d) { return transform(position(d) + offset); });\n\n    line\n        .attr(x + "2", k * tickSizeInner);\n\n    text\n        .attr(x, k * spacing)\n        .text(format);\n\n    selection.filter(entering)\n        .attr("fill", "none")\n        .attr("font-size", 10)\n        .attr("font-family", "sans-serif")\n        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");\n\n    selection\n        .each(function() { this.__axis = position; });\n  }\n\n  axis.scale = function(_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function() {\n    return tickArguments = Array.from(arguments), axis;\n  };\n\n  axis.tickArguments = function(_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function(_) {\n    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function(_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function(_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function(_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function(_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function(_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  axis.offset = function(_) {\n    return arguments.length ? (offset = +_, axis) : offset;\n  };\n\n  return axis;\n}\n\nfunction axisTop(scale) {\n  return axis(axis_top, scale);\n}\n\nfunction axisRight(scale) {\n  return axis(right, scale);\n}\n\nfunction axisBottom(scale) {\n  return axis(bottom, scale);\n}\n\nfunction axisLeft(scale) {\n  return axis(left, scale);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-axis/src/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selector.js\nfunction none() {}\n\n/* harmony default export */ function selector(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/select.js\n\n\n\n/* harmony default export */ function selection_select(select) {\n  if (typeof select !== "function") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if ("__data__" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/array.js\n// Given something array like (or null), returns something that is strictly an\n// array. This is used to ensure that array-like objects passed to d3.selectAll\n// or selection.selectAll are converted into proper arrays when creating a\n// selection; we don’t ever want to create a selection backed by a live\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\n// static NodeList as a group, since it safely derived from querySelectorAll.\nfunction array(x) {\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selectorAll.js\nfunction empty() {\n  return [];\n}\n\n/* harmony default export */ function selectorAll(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectAll.js\n\n\n\n\nfunction arrayAll(select) {\n  return function() {\n    return array(select.apply(this, arguments));\n  };\n}\n\n/* harmony default export */ function selectAll(select) {\n  if (typeof select === "function") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/matcher.js\n/* harmony default export */ function matcher(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nfunction childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectChild.js\n\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\n/* harmony default export */ function selectChild(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === "function" ? match : childMatcher(match)));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectChildren.js\n\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return Array.from(this.children);\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\n/* harmony default export */ function selectChildren(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === "function" ? match : childMatcher(match)));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/filter.js\n\n\n\n/* harmony default export */ function selection_filter(match) {\n  if (typeof match !== "function") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/sparse.js\n/* harmony default export */ function sparse(update) {\n  return new Array(update.length);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/enter.js\n\n\n\n/* harmony default export */ function enter() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nfunction EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/constant.js\n/* harmony default export */ function src_constant(x) {\n  return function() {\n    return x;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/data.js\n\n\n\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + "";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\n/* harmony default export */ function data(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== "function") value = src_constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === "object" && "length" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/exit.js\n\n\n\n/* harmony default export */ function exit() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/join.js\n/* harmony default export */ function join(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  if (typeof onenter === "function") {\n    enter = onenter(enter);\n    if (enter) enter = enter.selection();\n  } else {\n    enter = enter.append(onenter + "");\n  }\n  if (onupdate != null) {\n    update = onupdate(update);\n    if (update) update = update.selection();\n  }\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/merge.js\n\n\n/* harmony default export */ function merge(context) {\n  var selection = context.selection ? context.selection() : context;\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/order.js\n/* harmony default export */ function order() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/sort.js\n\n\n/* harmony default export */ function sort(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/call.js\n/* harmony default export */ function call() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/nodes.js\n/* harmony default export */ function nodes() {\n  return Array.from(this);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/node.js\n/* harmony default export */ function node() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/size.js\n/* harmony default export */ function size() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/empty.js\n/* harmony default export */ function selection_empty() {\n  return !this.node();\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/each.js\n/* harmony default export */ function each(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/namespaces.js\nvar xhtml = "http://www.w3.org/1999/xhtml";\n\n/* harmony default export */ const namespaces = ({\n  svg: "http://www.w3.org/2000/svg",\n  xhtml: xhtml,\n  xlink: "http://www.w3.org/1999/xlink",\n  xml: "http://www.w3.org/XML/1998/namespace",\n  xmlns: "http://www.w3.org/2000/xmlns/"\n});\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/namespace.js\n\n\n/* harmony default export */ function namespace(name) {\n  var prefix = name += "", i = prefix.indexOf(":");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/attr.js\n\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\n/* harmony default export */ function attr(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/window.js\n/* harmony default export */ function src_window(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/style.js\n\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\n/* harmony default export */ function style(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === "function"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? "" : priority))\n      : styleValue(this.node(), name);\n}\n\nfunction styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || src_window(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/property.js\nfunction propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\n/* harmony default export */ function property(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === "function"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/classed.js\nfunction classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute("class") || "");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute("class", this._names.join(" "));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute("class", this._names.join(" "));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\n/* harmony default export */ function classed(name, value) {\n  var names = classArray(name + "");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === "function"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/text.js\nfunction textRemove() {\n  this.textContent = "";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? "" : v;\n  };\n}\n\n/* harmony default export */ function selection_text(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === "function"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/html.js\nfunction htmlRemove() {\n  this.innerHTML = "";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? "" : v;\n  };\n}\n\n/* harmony default export */ function html(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === "function"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/raise.js\nfunction raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\n/* harmony default export */ function selection_raise() {\n  return this.each(raise);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/lower.js\nfunction lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\n/* harmony default export */ function selection_lower() {\n  return this.each(lower);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/creator.js\n\n\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\n/* harmony default export */ function creator(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/append.js\n\n\n/* harmony default export */ function append(name) {\n  var create = typeof name === "function" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/insert.js\n\n\n\nfunction constantNull() {\n  return null;\n}\n\n/* harmony default export */ function insert(name, before) {\n  var create = typeof name === "function" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/remove.js\nfunction remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\n/* harmony default export */ function selection_remove() {\n  return this.each(remove);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/clone.js\nfunction selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\n/* harmony default export */ function clone(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/datum.js\n/* harmony default export */ function selection_datum(value) {\n  return arguments.length\n      ? this.property("__data__", value)\n      : this.node().__data__;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/on.js\nfunction contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = "", i = t.indexOf(".");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\n/* harmony default export */ function on(typename, value, options) {\n  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/dispatch.js\n\n\nfunction dispatchEvent(node, type, params) {\n  var window = src_window(node),\n      event = window.CustomEvent;\n\n  if (typeof event === "function") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent("Event");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\n/* harmony default export */ function selection_dispatch(type, params) {\n  return this.each((typeof params === "function"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/iterator.js\n/* harmony default export */ function* iterator() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar root = [null];\n\nfunction Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selectAll,\n  selectChild: selectChild,\n  selectChildren: selectChildren,\n  filter: selection_filter,\n  data: data,\n  enter: enter,\n  exit: exit,\n  join: join,\n  merge: merge,\n  selection: selection_selection,\n  order: order,\n  sort: sort,\n  call: call,\n  nodes: nodes,\n  node: node,\n  size: size,\n  empty: selection_empty,\n  each: each,\n  attr: attr,\n  style: style,\n  property: property,\n  classed: classed,\n  text: selection_text,\n  html: html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: append,\n  insert: insert,\n  remove: selection_remove,\n  clone: clone,\n  datum: selection_datum,\n  on: on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: iterator\n};\n\n/* harmony default export */ const src_selection = (selection);\n\n;// CONCATENATED MODULE: ./node_modules/d3-dispatch/src/dispatch.js\nvar noop = {value: () => {}};\n\nfunction dispatch_dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + "") || (t in _) || /[\\s.]/.test(t)) throw new Error("illegal type: " + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction dispatch_parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = "", i = t.indexOf(".");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch_dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = dispatch_parseTypenames(typename + "", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\n/* harmony default export */ const src_dispatch = (dispatch_dispatch);\n\n;// CONCATENATED MODULE: ./node_modules/d3-timer/src/timer.js\nvar timer_frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === "object" && performance.now ? performance : Date,\n    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nfunction now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nfunction Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== "function") throw new TypeError("callback is not a function");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nfunction timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nfunction timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++timer_frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --timer_frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  timer_frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    timer_frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (timer_frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    timer_frame = 1, setFrame(wake);\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-timer/src/timeout.js\n\n\n/* harmony default export */ function src_timeout(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/schedule.js\n\n\n\nvar emptyOn = src_dispatch("start", "end", "cancel", "interrupt");\nvar emptyTween = [];\n\nvar CREATED = 0;\nvar SCHEDULED = 1;\nvar STARTING = 2;\nvar STARTED = 3;\nvar RUNNING = 4;\nvar ENDING = 5;\nvar ENDED = 6;\n\n/* harmony default export */ function schedule(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nfunction init(node, id) {\n  var schedule = schedule_get(node, id);\n  if (schedule.state > CREATED) throw new Error("too late; already scheduled");\n  return schedule;\n}\n\nfunction schedule_set(node, id) {\n  var schedule = schedule_get(node, id);\n  if (schedule.state > STARTED) throw new Error("too late; already running");\n  return schedule;\n}\n\nfunction schedule_get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return src_timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call("interrupt", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call("cancel", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    src_timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call("start", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call("end", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/interrupt.js\n\n\n/* harmony default export */ function src_interrupt(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + "";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/interrupt.js\n\n\n/* harmony default export */ function selection_interrupt(name) {\n  return this.each(function() {\n    src_interrupt(this, name);\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/number.js\n/* harmony default export */ function src_number(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/decompose.js\nvar decompose_degrees = 180 / Math.PI;\n\nvar decompose_identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\n/* harmony default export */ function decompose(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * decompose_degrees,\n    skewX: Math.atan(skewX) * decompose_degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/parse.js\n\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nfunction parseCss(value) {\n  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");\n  return m.isIdentity ? decompose_identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nfunction parseSvg(value) {\n  if (value == null) return decompose_identity;\n  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");\n  svgNode.setAttribute("transform", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return decompose_identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/index.js\n\n\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + " " : "";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push("translate(", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: src_number(xa, xb)}, {i: i - 2, x: src_number(ya, yb)});\n    } else if (xb || yb) {\n      s.push("translate(" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: src_number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + "rotate(" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: src_number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + "skewX(" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + "scale(", null, ",", null, ")");\n      q.push({i: i - 4, x: src_number(xa, xb)}, {i: i - 2, x: src_number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + "scale(" + xb + "," + yb + ")");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join("");\n    };\n  };\n}\n\nvar interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");\nvar interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/tween.js\n\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = schedule_set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== "function") throw new Error;\n  return function() {\n    var schedule = schedule_set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\n/* harmony default export */ function tween(name, value) {\n  var id = this._id;\n\n  name += "";\n\n  if (arguments.length < 2) {\n    var tween = schedule_get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nfunction tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = schedule_set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return schedule_get(node, id).value[name];\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-color/src/define.js\n/* harmony default export */ function src_define(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nfunction extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-color/src/color.js\n\n\nfunction Color() {}\n\nvar darker = 0.7;\nvar brighter = 1 / darker;\n\nvar reI = "\\\\s*([+-]?\\\\d+)\\\\s*",\n    reN = "\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*",\n    reP = "\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp("^rgb\\\\(" + [reI, reI, reI] + "\\\\)$"),\n    reRgbPercent = new RegExp("^rgb\\\\(" + [reP, reP, reP] + "\\\\)$"),\n    reRgbaInteger = new RegExp("^rgba\\\\(" + [reI, reI, reI, reN] + "\\\\)$"),\n    reRgbaPercent = new RegExp("^rgba\\\\(" + [reP, reP, reP, reN] + "\\\\)$"),\n    reHslPercent = new RegExp("^hsl\\\\(" + [reN, reP, reP] + "\\\\)$"),\n    reHslaPercent = new RegExp("^hsla\\\\(" + [reN, reP, reP, reN] + "\\\\)$");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\nsrc_define(Color, color, {\n  copy: function(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nfunction color(format) {\n  var m, l;\n  format = (format + "").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nfunction rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nfunction color_rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nfunction Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\nsrc_define(Rgb, color_rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return "#" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? "rgb(" : "rgba(")\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n      + (a === 1 ? ")" : ", " + a + ")");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? "0" : "") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nfunction hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nfunction hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nsrc_define(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? "hsl(" : "hsla(")\n        + (this.h || 0) + ", "\n        + (this.s || 0) * 100 + "%, "\n        + (this.l || 0) * 100 + "%"\n        + (a === 1 ? ")" : ", " + a + ")");\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basis.js\nfunction basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\n/* harmony default export */ function src_basis(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basisClosed.js\n\n\n/* harmony default export */ function basisClosed(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/constant.js\n/* harmony default export */ const d3_interpolate_src_constant = (x => () => x);\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/color.js\n\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nfunction hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nfunction gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : d3_interpolate_src_constant(isNaN(a) ? b : a);\n  };\n}\n\nfunction nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : d3_interpolate_src_constant(isNaN(a) ? b : a);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/rgb.js\n\n\n\n\n\n/* harmony default export */ const rgb = ((function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = color_rgb(start)).r, (end = color_rgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + "";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1));\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = color_rgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + "";\n    };\n  };\n}\n\nvar rgbBasis = rgbSpline(src_basis);\nvar rgbBasisClosed = rgbSpline(basisClosed);\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/string.js\n\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, "g");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + "";\n  };\n}\n\n/* harmony default export */ function string(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + "", b = b + "";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: src_number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join("");\n        });\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/interpolate.js\n\n\n\n/* harmony default export */ function transition_interpolate(a, b) {\n  var c;\n  return (typeof b === "number" ? src_number\n      : b instanceof color ? rgb\n      : (c = color(b)) ? (b = c, rgb)\n      : string)(a, b);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/attr.js\n\n\n\n\n\nfunction attr_attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attr_attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attr_attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + "",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attr_attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + "",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attr_attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + "";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attr_attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + "";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\n/* harmony default export */ function transition_attr(name, value) {\n  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : transition_interpolate;\n  return this.attrTween(name, typeof value === "function"\n      ? (fullname.local ? attr_attrFunctionNS : attr_attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))\n      : value == null ? (fullname.local ? attr_attrRemoveNS : attr_attrRemove)(fullname)\n      : (fullname.local ? attr_attrConstantNS : attr_attrConstant)(fullname, i, value));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/attrTween.js\n\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\n/* harmony default export */ function transition_attrTween(name, value) {\n  var key = "attr." + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== "function") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/delay.js\n\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\n/* harmony default export */ function delay(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === "function"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : schedule_get(this.node(), id).delay;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/duration.js\n\n\nfunction durationFunction(id, value) {\n  return function() {\n    schedule_set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    schedule_set(this, id).duration = value;\n  };\n}\n\n/* harmony default export */ function duration(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === "function"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : schedule_get(this.node(), id).duration;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/ease.js\n\n\nfunction easeConstant(id, value) {\n  if (typeof value !== "function") throw new Error;\n  return function() {\n    schedule_set(this, id).ease = value;\n  };\n}\n\n/* harmony default export */ function ease(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : schedule_get(this.node(), id).ease;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/easeVarying.js\n\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== "function") throw new Error;\n    schedule_set(this, id).ease = v;\n  };\n}\n\n/* harmony default export */ function transition_easeVarying(value) {\n  if (typeof value !== "function") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/filter.js\n\n\n\n/* harmony default export */ function transition_filter(match) {\n  if (typeof match !== "function") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/merge.js\n\n\n/* harmony default export */ function transition_merge(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/on.js\n\n\nfunction start(name) {\n  return (name + "").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(".");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === "start";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : schedule_set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\n/* harmony default export */ function transition_on(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? schedule_get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/remove.js\nfunction removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\n/* harmony default export */ function transition_remove() {\n  return this.on("end.remove", removeFunction(this._id));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/select.js\n\n\n\n\n/* harmony default export */ function transition_select(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== "function") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if ("__data__" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, schedule_get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/selectAll.js\n\n\n\n\n/* harmony default export */ function transition_selectAll(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== "function") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = schedule_get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/selection.js\n\n\nvar selection_Selection = src_selection.prototype.constructor;\n\n/* harmony default export */ function transition_selection() {\n  return new selection_Selection(this._groups, this._parents);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/style.js\n\n\n\n\n\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = styleValue(this, name),\n        string1 = (this.style.removeProperty(name), styleValue(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction style_styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction style_styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + "",\n      interpolate0;\n  return function() {\n    var string0 = styleValue(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction style_styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = styleValue(this, name),\n        value1 = value(this),\n        string1 = value1 + "";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;\n  return function() {\n    var schedule = schedule_set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = style_styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\n/* harmony default export */ function transition_style(name, value, priority) {\n  var i = (name += "") === "transform" ? interpolateTransformCss : transition_interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on("end.style." + name, style_styleRemove(name))\n    : typeof value === "function" ? this\n      .styleTween(name, style_styleFunction(name, i, tweenValue(this, "style." + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, style_styleConstant(name, i, value), priority)\n      .on("end.style." + name, null);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/styleTween.js\nfunction styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\n/* harmony default export */ function transition_styleTween(name, value, priority) {\n  var key = "style." + (name += "");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== "function") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/text.js\n\n\nfunction text_textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction text_textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? "" : value1;\n  };\n}\n\n/* harmony default export */ function transition_text(value) {\n  return this.tween("text", typeof value === "function"\n      ? text_textFunction(tweenValue(this, "text", value))\n      : text_textConstant(value == null ? "" : value + ""));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/textTween.js\nfunction textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\n/* harmony default export */ function transition_textTween(value) {\n  var key = "text";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== "function") throw new Error;\n  return this.tween(key, textTween(value));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/transition.js\n\n\n\n/* harmony default export */ function transition() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = schedule_get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/end.js\n\n\n/* harmony default export */ function end() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = schedule_set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar id = 0;\n\nfunction Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nfunction transition_transition(name) {\n  return src_selection().transition(name);\n}\n\nfunction newId() {\n  return ++id;\n}\n\nvar selection_prototype = src_selection.prototype;\n\nTransition.prototype = transition_transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  selectChild: selection_prototype.selectChild,\n  selectChildren: selection_prototype.selectChildren,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: tween,\n  delay: delay,\n  duration: duration,\n  ease: ease,\n  easeVarying: transition_easeVarying,\n  end: end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n\n;// CONCATENATED MODULE: ./node_modules/d3-ease/src/cubic.js\nfunction cubicIn(t) {\n  return t * t * t;\n}\n\nfunction cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nfunction cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/transition.js\n\n\n\n\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: cubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\n/* harmony default export */ function selection_transition(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/index.js\n\n\n\n\nsrc_selection.prototype.interrupt = selection_interrupt;\nsrc_selection.prototype.transition = selection_transition;\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/index.js\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-brush/src/brush.js\n\n\n\n\n\n\n\n\n\nvar MODE_DRAG = {name: "drag"},\n    MODE_SPACE = {name: "space"},\n    MODE_HANDLE = {name: "handle"},\n    MODE_CENTER = {name: "center"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: "x",\n  handles: ["w", "e"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: "y",\n  handles: ["n", "s"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: "xy",\n  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: "crosshair",\n  selection: "move",\n  n: "ns-resize",\n  e: "ew-resize",\n  s: "ns-resize",\n  w: "ew-resize",\n  nw: "nwse-resize",\n  ne: "nesw-resize",\n  se: "nwse-resize",\n  sw: "nesw-resize"\n};\n\nvar flipX = {\n  e: "w",\n  w: "e",\n  nw: "ne",\n  ne: "nw",\n  se: "sw",\n  sw: "se"\n};\n\nvar flipY = {\n  n: "s",\n  s: "n",\n  nw: "sw",\n  ne: "se",\n  se: "ne",\n  sw: "nw"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute("viewBox")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction brush_empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nfunction brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nfunction brushX() {\n  return brush_brush(X);\n}\n\nfunction brushY() {\n  return brush_brush(Y);\n}\n\n/* harmony default export */ function brush() {\n  return brush_brush(XY);\n}\n\nfunction brush_brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch("start", "brush", "end"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property("__brush", initialize)\n      .selectAll(".overlay")\n      .data([type("overlay")]);\n\n    overlay.enter().append("rect")\n        .attr("class", "overlay")\n        .attr("pointer-events", "all")\n        .attr("cursor", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr("x", extent[0][0])\n              .attr("y", extent[0][1])\n              .attr("width", extent[1][0] - extent[0][0])\n              .attr("height", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(".selection")\n      .data([type("selection")])\n      .enter().append("rect")\n        .attr("class", "selection")\n        .attr("cursor", cursors.selection)\n        .attr("fill", "#777")\n        .attr("fill-opacity", 0.3)\n        .attr("stroke", "#fff")\n        .attr("shape-rendering", "crispEdges");\n\n    var handle = group.selectAll(".handle")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append("rect")\n        .attr("class", function(d) { return "handle handle--" + d.type; })\n        .attr("cursor", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr("fill", "none")\n        .attr("pointer-events", "all")\n        .on("mousedown.brush", started)\n      .filter(touchable)\n        .on("touchstart.brush", started)\n        .on("touchmove.brush", touchmoved)\n        .on("touchend.brush touchcancel.brush", touchended)\n        .style("touch-action", "none")\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n  }\n\n  brush.move = function(group, selection, event) {\n    if (group.tween) {\n      group\n          .on("start.brush", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on("interrupt.brush end.brush", function(event) { emitter(this, arguments).end(event); })\n          .tween("brush", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start(event).brush(event).end(event);\n          });\n    }\n  };\n\n  brush.clear = function(group, event) {\n    brush.move(group, null, event);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(".selection")\n          .style("display", null)\n          .attr("x", selection[0][0])\n          .attr("y", selection[0][1])\n          .attr("width", selection[1][0] - selection[0][0])\n          .attr("height", selection[1][1] - selection[0][1]);\n\n      group.selectAll(".handle")\n          .style("display", null)\n          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(".selection,.handle")\n          .style("display", "none")\n          .attr("x", null)\n          .attr("y", null)\n          .attr("width", null)\n          .attr("height", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit("start", event, mode);\n      else this.emit("brush", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit("brush", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (type === "overlay") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move(event);\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr("pointer-events", "none");\n\n    var overlay = group.selectAll(".overlay")\n        .attr("cursor", cursors[type]);\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on("mousemove.brush", moved, true)\n          .on("mouseup.brush", ended, true);\n      if (keys) view\n          .on("keydown.brush", keydowned, true)\n          .on("keyup.brush", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);\n      }\n      group.attr("pointer-events", "all");\n      overlay.attr("cursor", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (brush_empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr("cursor", cursors.selection);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move(event);\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr("cursor", cursors[type]);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === "function" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-brush/src/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/select.js\n\n\n/* harmony default export */ function src_select(selector) {\n  return typeof selector === "string"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/sourceEvent.js\n/* harmony default export */ function sourceEvent(event) {\n  let sourceEvent;\n  while (sourceEvent = event.sourceEvent) event = sourceEvent;\n  return event;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/pointer.js\n\n\n/* harmony default export */ function src_pointer(event, node) {\n  event = sourceEvent(event);\n  if (node === undefined) node = event.currentTarget;\n  if (node) {\n    var svg = node.ownerSVGElement || node;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    if (node.getBoundingClientRect) {\n      var rect = node.getBoundingClientRect();\n      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n    }\n  }\n  return [event.pageX, event.pageY];\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-drag/src/noevent.js\n// These are typically used in conjunction with noevent to ensure that we can\n// preventDefault on the event.\nconst nonpassive = {passive: false};\nconst nonpassivecapture = {capture: true, passive: false};\n\nfunction noevent_nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\n/* harmony default export */ function src_noevent(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-drag/src/nodrag.js\n\n\n\n/* harmony default export */ function nodrag(view) {\n  var root = view.document.documentElement,\n      selection = src_select(view).on("dragstart.drag", src_noevent, nonpassivecapture);\n  if ("onselectstart" in root) {\n    selection.on("selectstart.drag", src_noevent, nonpassivecapture);\n  } else {\n    root.__noselect = root.style.MozUserSelect;\n    root.style.MozUserSelect = "none";\n  }\n}\n\nfunction yesdrag(view, noclick) {\n  var root = view.document.documentElement,\n      selection = src_select(view).on("dragstart.drag", null);\n  if (noclick) {\n    selection.on("click.drag", src_noevent, nonpassivecapture);\n    setTimeout(function() { selection.on("click.drag", null); }, 0);\n  }\n  if ("onselectstart" in root) {\n    selection.on("selectstart.drag", null);\n  } else {\n    root.style.MozUserSelect = root.__noselect;\n    delete root.__noselect;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-drag/src/constant.js\n/* harmony default export */ const d3_drag_src_constant = (x => () => x);\n\n;// CONCATENATED MODULE: ./node_modules/d3-drag/src/event.js\nfunction DragEvent(type, {\n  sourceEvent,\n  subject,\n  target,\n  identifier,\n  active,\n  x, y, dx, dy,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    subject: {value: subject, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    identifier: {value: identifier, enumerable: true, configurable: true},\n    active: {value: active, enumerable: true, configurable: true},\n    x: {value: x, enumerable: true, configurable: true},\n    y: {value: y, enumerable: true, configurable: true},\n    dx: {value: dx, enumerable: true, configurable: true},\n    dy: {value: dy, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n\nDragEvent.prototype.on = function() {\n  var value = this._.on.apply(this._, arguments);\n  return value === this._ ? this : value;\n};\n\n;// CONCATENATED MODULE: ./node_modules/d3-drag/src/drag.js\n\n\n\n\n\n\n\n// Ignore right-click, since that should open the context menu.\nfunction drag_defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultContainer() {\n  return this.parentNode;\n}\n\nfunction defaultSubject(event, d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n\nfunction drag_defaultTouchable() {\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\n}\n\n/* harmony default export */ function drag() {\n  var filter = drag_defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = drag_defaultTouchable,\n      gestures = {},\n      listeners = src_dispatch("start", "drag", "end"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n\n  function drag(selection) {\n    selection\n        .on("mousedown.drag", mousedowned)\n      .filter(touchable)\n        .on("touchstart.drag", touchstarted)\n        .on("touchmove.drag", touchmoved, nonpassive)\n        .on("touchend.drag touchcancel.drag", touchended)\n        .style("touch-action", "none")\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n  }\n\n  function mousedowned(event, d) {\n    if (touchending || !filter.call(this, event, d)) return;\n    var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");\n    if (!gesture) return;\n    src_select(event.view)\n      .on("mousemove.drag", mousemoved, nonpassivecapture)\n      .on("mouseup.drag", mouseupped, nonpassivecapture);\n    nodrag(event.view);\n    noevent_nopropagation(event);\n    mousemoving = false;\n    mousedownx = event.clientX;\n    mousedowny = event.clientY;\n    gesture("start", event);\n  }\n\n  function mousemoved(event) {\n    src_noevent(event);\n    if (!mousemoving) {\n      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;\n      mousemoving = dx * dx + dy * dy > clickDistance2;\n    }\n    gestures.mouse("drag", event);\n  }\n\n  function mouseupped(event) {\n    src_select(event.view).on("mousemove.drag mouseup.drag", null);\n    yesdrag(event.view, mousemoving);\n    src_noevent(event);\n    gestures.mouse("end", event);\n  }\n\n  function touchstarted(event, d) {\n    if (!filter.call(this, event, d)) return;\n    var touches = event.changedTouches,\n        c = container.call(this, event, d),\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {\n        noevent_nopropagation(event);\n        gesture("start", event, touches[i]);\n      }\n    }\n  }\n\n  function touchmoved(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        src_noevent(event);\n        gesture("drag", event, touches[i]);\n      }\n    }\n  }\n\n  function touchended(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        noevent_nopropagation(event);\n        gesture("end", event, touches[i]);\n      }\n    }\n  }\n\n  function beforestart(that, container, event, d, identifier, touch) {\n    var dispatch = listeners.copy(),\n        p = src_pointer(touch || event, container), dx, dy,\n        s;\n\n    if ((s = subject.call(that, new DragEvent("beforestart", {\n        sourceEvent: event,\n        target: drag,\n        identifier,\n        active,\n        x: p[0],\n        y: p[1],\n        dx: 0,\n        dy: 0,\n        dispatch\n      }), d)) == null) return;\n\n    dx = s.x - p[0] || 0;\n    dy = s.y - p[1] || 0;\n\n    return function gesture(type, event, touch) {\n      var p0 = p, n;\n      switch (type) {\n        case "start": gestures[identifier] = gesture, n = active++; break;\n        case "end": delete gestures[identifier], --active; // falls through\n        case "drag": p = src_pointer(touch || event, container), n = active; break;\n      }\n      dispatch.call(\n        type,\n        that,\n        new DragEvent(type, {\n          sourceEvent: event,\n          subject: s,\n          target: drag,\n          identifier,\n          active: n,\n          x: p[0] + dx,\n          y: p[1] + dy,\n          dx: p[0] - p0[0],\n          dy: p[1] - p0[1],\n          dispatch\n        }),\n        d\n      );\n    };\n  }\n\n  drag.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === "function" ? _ : d3_drag_src_constant(!!_), drag) : filter;\n  };\n\n  drag.container = function(_) {\n    return arguments.length ? (container = typeof _ === "function" ? _ : d3_drag_src_constant(_), drag) : container;\n  };\n\n  drag.subject = function(_) {\n    return arguments.length ? (subject = typeof _ === "function" ? _ : d3_drag_src_constant(_), drag) : subject;\n  };\n\n  drag.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : d3_drag_src_constant(!!_), drag) : touchable;\n  };\n\n  drag.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? drag : value;\n  };\n\n  drag.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n  };\n\n  return drag;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-drag/src/index.js\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-dsv/src/dsv.js\nvar EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function("d", "return {" + columns.map(function(name, i) {\n    return JSON.stringify(name) + ": d[" + i + "] || \\"\\"";\n  }).join(",") + "}");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + "", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? "-" + pad(-year, 6)\n    : year > 9999 ? "+" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? "Invalid Date"\n      : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"\n      : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"\n      : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"\n      : "");\n}\n\n/* harmony default export */ function dsv(delimiter) {\n  var reFormat = new RegExp("[\\"" + delimiter + "\\n\\r]"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/""/g, "\\"");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\\n");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join("\\n");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join("\\n");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? ""\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += "") ? "\\"" + value.replace(/"/g, "\\"\\"") + "\\""\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-dsv/src/csv.js\n\n\nvar csv = dsv(",");\n\nvar csvParse = csv.parse;\nvar csvParseRows = csv.parseRows;\nvar csvFormat = csv.format;\nvar csvFormatBody = csv.formatBody;\nvar csvFormatRows = csv.formatRows;\nvar csvFormatRow = csv.formatRow;\nvar csvFormatValue = csv.formatValue;\n\n;// CONCATENATED MODULE: ./node_modules/d3-dsv/src/tsv.js\n\n\nvar tsv = dsv("\\t");\n\nvar tsvParse = tsv.parse;\nvar tsvParseRows = tsv.parseRows;\nvar tsvFormat = tsv.format;\nvar tsvFormatBody = tsv.formatBody;\nvar tsvFormatRows = tsv.formatRows;\nvar tsvFormatRow = tsv.formatRow;\nvar tsvFormatValue = tsv.formatValue;\n\n;// CONCATENATED MODULE: ./node_modules/d3-fetch/src/text.js\nfunction responseText(response) {\n  if (!response.ok) throw new Error(response.status + " " + response.statusText);\n  return response.text();\n}\n\n/* harmony default export */ function src_text(input, init) {\n  return fetch(input, init).then(responseText);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-fetch/src/dsv.js\n\n\n\nfunction dsvParse(parse) {\n  return function(input, init, row) {\n    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;\n    return src_text(input, init).then(function(response) {\n      return parse(response, row);\n    });\n  };\n}\n\nfunction dsv_dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function(response) {\n    return format.parse(response, row);\n  });\n}\n\nvar dsv_csv = dsvParse(csvParse);\nvar dsv_tsv = dsvParse(tsvParse);\n\n;// CONCATENATED MODULE: ./node_modules/d3-fetch/src/json.js\nfunction responseJson(response) {\n  if (!response.ok) throw new Error(response.status + " " + response.statusText);\n  if (response.status === 204 || response.status === 205) return;\n  return response.json();\n}\n\n/* harmony default export */ function json(input, init) {\n  return fetch(input, init).then(responseJson);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-fetch/src/index.js\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/identity.js\n/* harmony default export */ const d3_geo_src_identity = (x => x);\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/stream.js\nfunction streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\n/* harmony default export */ function stream(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/fsum.js\n// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nclass Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nfunction fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nfunction fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/math.js\nvar math_epsilon = 1e-6;\nvar epsilon2 = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar quarterPi = pi / 4;\nvar tau = pi * 2;\n\nvar math_degrees = 180 / pi;\nvar math_radians = pi / 180;\n\nvar math_abs = Math.abs;\nvar atan = Math.atan;\nvar atan2 = Math.atan2;\nvar cos = Math.cos;\nvar ceil = Math.ceil;\nvar exp = Math.exp;\nvar floor = Math.floor;\nvar hypot = Math.hypot;\nvar log = Math.log;\nvar pow = Math.pow;\nvar sin = Math.sin;\nvar sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nvar sqrt = Math.sqrt;\nvar tan = Math.tan;\n\nfunction acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nfunction asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nfunction haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/noop.js\nfunction noop_noop() {}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/area.js\n\n\n\n\nvar areaSum = new Adder(),\n    areaRingSum = new Adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop_noop,\n  lineStart: noop_noop,\n  lineEnd: noop_noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop_noop;\n    areaSum.add(math_abs(areaRingSum));\n    areaRingSum = new Adder();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum = new Adder();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\n/* harmony default export */ const path_area = (areaStream);\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/bounds.js\n\n\nvar bounds_x0 = Infinity,\n    bounds_y0 = bounds_x0,\n    x1 = -bounds_x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop_noop,\n  lineEnd: noop_noop,\n  polygonStart: noop_noop,\n  polygonEnd: noop_noop,\n  result: function() {\n    var bounds = [[bounds_x0, bounds_y0], [x1, y1]];\n    x1 = y1 = -(bounds_y0 = bounds_x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < bounds_x0) bounds_x0 = x;\n  if (x > x1) x1 = x;\n  if (y < bounds_y0) bounds_y0 = y;\n  if (y > y1) y1 = y;\n}\n\n/* harmony default export */ const bounds = (boundsStream);\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/centroid.js\n\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    centroid_x00,\n    centroid_y00,\n    centroid_x0,\n    centroid_y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(centroid_x0 = x, centroid_y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - centroid_x0, dy = y - centroid_y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (centroid_x0 + x) / 2;\n  Y1 += z * (centroid_y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(centroid_x0 = x, centroid_y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(centroid_x00, centroid_y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(centroid_x00 = centroid_x0 = x, centroid_y00 = centroid_y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - centroid_x0,\n      dy = y - centroid_y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (centroid_x0 + x) / 2;\n  Y1 += z * (centroid_y0 + y) / 2;\n  Z1 += z;\n\n  z = centroid_y0 * x - centroid_x0 * y;\n  X2 += z * (centroid_x0 + x);\n  Y2 += z * (centroid_y0 + y);\n  Z2 += z * 3;\n  centroidPoint(centroid_x0 = x, centroid_y0 = y);\n}\n\n/* harmony default export */ const centroid = (centroidStream);\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/context.js\n\n\n\nfunction PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop_noop\n};\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/measure.js\n\n\n\n\nvar lengthSum = new Adder(),\n    lengthRing,\n    measure_x00,\n    measure_y00,\n    measure_x0,\n    measure_y0;\n\nvar lengthStream = {\n  point: noop_noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(measure_x00, measure_y00);\n    lengthStream.point = noop_noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum = new Adder();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  measure_x00 = measure_x0 = x, measure_y00 = measure_y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  measure_x0 -= x, measure_y0 -= y;\n  lengthSum.add(sqrt(measure_x0 * measure_x0 + measure_y0 * measure_y0));\n  measure_x0 = x, measure_y0 = y;\n}\n\n/* harmony default export */ const measure = (lengthStream);\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/string.js\nfunction PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push("Z");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push("M", x, ",", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push("L", x, ",", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push("M", x, ",", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join("");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return "m0," + radius\n      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius\n      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius\n      + "z";\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/index.js\n\n\n\n\n\n\n\n\n\n/* harmony default export */ function path(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(path_area));\n    return path_area.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(measure));\n    return measure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(bounds));\n    return bounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(centroid));\n    return centroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, d3_geo_src_identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/compose.js\n/* harmony default export */ function compose(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/rotation.js\n\n\n\nfunction rotationIdentity(lambda, phi) {\n  return [math_abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nfunction rotation_rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\n/* harmony default export */ function rotation(rotate) {\n  rotate = rotation_rotateRadians(rotate[0] * math_radians, rotate[1] * math_radians, rotate.length > 2 ? rotate[2] * math_radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * math_radians, coordinates[1] * math_radians);\n    return coordinates[0] *= math_degrees, coordinates[1] *= math_degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * math_radians, coordinates[1] * math_radians);\n    return coordinates[0] *= math_degrees, coordinates[1] *= math_degrees, coordinates;\n  };\n\n  return forward;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/buffer.js\n\n\n/* harmony default export */ function buffer() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop_noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/pointEqual.js\n\n\n/* harmony default export */ function pointEqual(a, b) {\n  return math_abs(a[0] - b[0]) < math_epsilon && math_abs(a[1] - b[1]) < math_epsilon;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/rejoin.js\n\n\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\n/* harmony default export */ function rejoin(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * math_epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  rejoin_link(subject);\n  rejoin_link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction rejoin_link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/cartesian.js\n\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nfunction cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nfunction cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nfunction cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nfunction cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nfunction cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nfunction cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/polygonContains.js\n\n\n\n\nfunction longitude(point) {\n  return math_abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((math_abs(point[0]) + pi) % tau - pi);\n}\n\n/* harmony default export */ function polygonContains(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + math_epsilon;\n  else if (sinPhi === -1) phi = -halfPi - math_epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -math_epsilon || angle < math_epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/merge.js\nfunction* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nfunction merge_merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/index.js\n\n\n\n\n\n\n/* harmony default export */ function clip(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = buffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge_merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          rejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - math_epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - math_epsilon : halfPi - b[1]);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/antimeridian.js\n\n\n\n/* harmony default export */ const antimeridian = (clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n));\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = math_abs(lambda1 - lambda0);\n      if (math_abs(delta - pi) < math_epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (math_abs(lambda0 - sign0) < math_epsilon) lambda0 -= sign0 * math_epsilon; // handle degeneracies\n        if (math_abs(lambda1 - sign1) < math_epsilon) lambda1 -= sign1 * math_epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return math_abs(sinLambda0Lambda1) > math_epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (math_abs(from[0] - to[0]) > math_epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/circle.js\n\n\n\n\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - math_epsilon) % tau;\n}\n\n/* harmony default export */ function src_circle() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: "Polygon", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/circle.js\n\n\n\n\n\n\n/* harmony default export */ function clip_circle(radius) {\n  var cr = cos(radius),\n      delta = 6 * math_radians,\n      smallRadius = cr > 0,\n      notHemisphere = math_abs(cr) > math_epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = math_abs(delta - pi) < math_epsilon,\n        meridian = polar || delta < math_epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (math_abs(q[0] - lambda0) < math_epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle\'s bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/line.js\n/* harmony default export */ function line(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/rectangle.js\n\n\n\n\n\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nfunction clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return math_abs(p[0] - x0) < math_epsilon ? direction > 0 ? 0 : 3\n        : math_abs(p[0] - x1) < math_epsilon ? direction > 0 ? 2 : 1\n        : math_abs(p[1] - y0) < math_epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = buffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge_merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          rejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (line(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/transform.js\n/* harmony default export */ function transform(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nfunction transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/fit.js\n\n\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  stream(object, projection.stream(bounds));\n  fitBounds(bounds.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nfunction fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nfunction fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/resample.js\n\n\n\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * math_radians); // cos(minimum angular distance)\n\n/* harmony default export */ function resample(project, delta2) {\n  return +delta2 ? resample_resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample_resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = math_abs(math_abs(c) - 1) < math_epsilon || math_abs(lambda0 - lambda1) < math_epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || math_abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/index.js\n\n\n\n\n\n\n\n\n\n\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * math_radians, y * math_radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nfunction projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nfunction projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = antimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = d3_geo_src_identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * math_radians, point[1] * math_radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * math_degrees, point[1] * math_degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clip_circle(theta = _ * math_radians) : (theta = null, antimeridian), reset()) : theta * math_degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, d3_geo_src_identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * math_radians, phi = _[1] % 360 * math_radians, recenter()) : [lambda * math_degrees, phi * math_degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * math_radians, deltaPhi = _[1] % 360 * math_radians, deltaGamma = _.length > 2 ? _[2] % 360 * math_radians : 0, recenter()) : [deltaLambda * math_degrees, deltaPhi * math_degrees, deltaGamma * math_degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * math_radians, recenter()) : alpha * math_degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotation_rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/mercator.js\n\n\n\n\nfunction mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\n/* harmony default export */ function mercator() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nfunction mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-geo/src/index.js\n\n\n\n\n\n\n // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-path/src/path.js\nconst path_pi = Math.PI,\n    path_tau = 2 * path_pi,\n    path_epsilon = 1e-6,\n    tauEpsilon = path_tau - path_epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = "";\n}\n\nfunction path_path() {\n  return new Path;\n}\n\nPath.prototype = path_path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += "Z";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error("negative radius: " + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > path_epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > path_epsilon) || !r) {\n      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((path_pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > path_epsilon) {\n        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);\n      }\n\n      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error("negative radius: " + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += "M" + x0 + "," + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > path_epsilon || Math.abs(this._y1 - y0) > path_epsilon) {\n      this._ += "L" + x0 + "," + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % path_tau + path_tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > path_epsilon) {\n      this._ += "A" + r + "," + r + ",0," + (+(da >= path_pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\n/* harmony default export */ const src_path = (path_path);\n\n;// CONCATENATED MODULE: ./node_modules/d3-path/src/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/range.js\nfunction range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/init.js\nfunction initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nfunction init_initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === "function") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === "function") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n\n;// CONCATENATED MODULE: ./node_modules/internmap/src/index.js\nclass InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nclass InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(key);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === "object" ? value.valueOf() : value;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/ordinal.js\n\n\n\nconst implicit = Symbol("implicit");\n\nfunction ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/band.js\n\n\n\n\nfunction band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = range(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/ticks.js\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/ascending.js\nfunction ascending_ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/bisector.js\n\n\nfunction bisector(f) {\n  let delta = f;\n  let compare1 = f;\n  let compare2 = f;\n\n  if (f.length !== 2) {\n    delta = (d, x) => f(d) - x;\n    compare1 = ascending_ascending;\n    compare2 = (d, x) => ascending_ascending(f(d), x);\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/number.js\nfunction number_number(x) {\n  return x === null ? NaN : +x;\n}\n\nfunction* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-array/src/bisect.js\n\n\n\n\nconst ascendingBisect = bisector(ascending_ascending);\nconst bisectRight = ascendingBisect.right;\nconst bisectLeft = ascendingBisect.left;\nconst bisectCenter = bisector(number_number).center;\n/* harmony default export */ const bisect = (bisectRight);\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/array.js\n\n\n\n/* harmony default export */ function src_array(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nfunction genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/date.js\n/* harmony default export */ function date(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/object.js\n\n\n/* harmony default export */ function object(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== "object") a = {};\n  if (b === null || typeof b !== "object") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/numberArray.js\n/* harmony default export */ function src_numberArray(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nfunction numberArray_isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/value.js\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ function value(a, b) {\n  var t = typeof b, c;\n  return b == null || t === "boolean" ? d3_interpolate_src_constant(b)\n      : (t === "number" ? src_number\n      : t === "string" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : numberArray_isNumberArray(b) ? src_numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object\n      : src_number)(a, b);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/round.js\n/* harmony default export */ function round(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/constant.js\nfunction constants(x) {\n  return function() {\n    return x;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/number.js\nfunction src_number_number(x) {\n  return +x;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/continuous.js\n\n\n\n\n\nvar unit = [0, 1];\n\nfunction continuous_identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constants(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction continuous_transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = value,\n      transform,\n      untransform,\n      unknown,\n      clamp = continuous_identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== continuous_identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), src_number)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, src_number_number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = round, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : continuous_identity, rescale()) : clamp !== continuous_identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nfunction continuous() {\n  return continuous_transformer()(continuous_identity, continuous_identity);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatSpecifier.js\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";\n  this.align = specifier.align === undefined ? ">" : specifier.align + "";\n  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";\n  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? "" : specifier.type + "";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? "0" : "")\n      + (this.width === undefined ? "" : Math.max(1, this.width | 0))\n      + (this.comma ? "," : "")\n      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))\n      + (this.trim ? "~" : "")\n      + this.type;\n};\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatDecimal.js\n/* harmony default export */ function formatDecimal(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString("en").replace(/,/g, "")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns ["123", 0].\nfunction formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/exponent.js\n\n\n/* harmony default export */ function exponent(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionPrefix.js\n\n\n/* harmony default export */ function precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatGroup.js\n/* harmony default export */ function formatGroup(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatNumerals.js\n/* harmony default export */ function formatNumerals(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatTrim.js\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n/* harmony default export */ function formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case ".": i0 = i1 = i; break;\n      case "0": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatPrefixAuto.js\n\n\nvar prefixExponent;\n\n/* harmony default export */ function formatPrefixAuto(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + "";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join("0")\n      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)\n      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatRounded.js\n\n\n/* harmony default export */ function formatRounded(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + "";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join("0");\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatTypes.js\n\n\n\n\n/* harmony default export */ const formatTypes = ({\n  "%": (x, p) => (x * 100).toFixed(p),\n  "b": (x) => Math.round(x).toString(2),\n  "c": (x) => x + "",\n  "d": formatDecimal,\n  "e": (x, p) => x.toExponential(p),\n  "f": (x, p) => x.toFixed(p),\n  "g": (x, p) => x.toPrecision(p),\n  "o": (x) => Math.round(x).toString(8),\n  "p": (x, p) => formatRounded(x * 100, p),\n  "r": formatRounded,\n  "s": formatPrefixAuto,\n  "X": (x) => Math.round(x).toString(16).toUpperCase(),\n  "x": (x) => Math.round(x).toString(16)\n});\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/identity.js\n/* harmony default export */ function d3_format_src_identity(x) {\n  return x;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/locale.js\n\n\n\n\n\n\n\n\n\nvar map = Array.prototype.map,\n    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];\n\n/* harmony default export */ function locale(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? d3_format_src_identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),\n      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",\n      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",\n      decimal = locale.decimal === undefined ? "." : locale.decimal + "",\n      numerals = locale.numerals === undefined ? d3_format_src_identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? "%" : locale.percent + "",\n      minus = locale.minus === undefined ? "−" : locale.minus + "",\n      nan = locale.nan === undefined ? "NaN" : locale.nan + "";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The "n" type is an alias for ",g".\n    if (type === "n") comma = true, type = "g";\n\n    // The "" type, and any invalid type, is an alias for ".12~g".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",\n        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === "c") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = "";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;\n        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not "0", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : "";\n\n      // If the fill character is "0", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case "<": value = valuePrefix + value + valueSuffix + padding; break;\n        case "=": value = valuePrefix + padding + value + valueSuffix; break;\n        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + "";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/defaultLocale.js\n\n\nvar defaultLocale_locale;\nvar format;\nvar formatPrefix;\n\ndefaultLocale({\n  thousands: ",",\n  grouping: [3],\n  currency: ["$", ""]\n});\n\nfunction defaultLocale(definition) {\n  defaultLocale_locale = locale(definition);\n  format = defaultLocale_locale.format;\n  formatPrefix = defaultLocale_locale.formatPrefix;\n  return defaultLocale_locale;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionRound.js\n\n\n/* harmony default export */ function precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionFixed.js\n\n\n/* harmony default export */ function precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/tickFormat.js\n\n\n\nfunction tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? ",f" : specifier);\n  switch (specifier.type) {\n    case "s": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case "":\n    case "e":\n    case "g":\n    case "p":\n    case "r": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");\n      break;\n    }\n    case "f":\n    case "%": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/linear.js\n\n\n\n\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear_linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear_linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/sequential.js\n\n\n\n\n\n\n\n\nfunction sequential_transformer() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = continuous_identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1;\n      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n    };\n  }\n\n  scale.range = range(value);\n\n  scale.rangeRound = range(round);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nfunction sequential_copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction sequential() {\n  var scale = linearish(sequential_transformer()(continuous_identity));\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequential());\n  };\n\n  return init_initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialLog() {\n  var scale = loggish(sequential_transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSymlog() {\n  var scale = symlogish(sequential_transformer());\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialPow() {\n  var scale = powish(sequential_transformer());\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale-chromatic/src/colors.js\n/* harmony default export */ function colors(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js\n\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\n/* harmony default export */ const viridis = (ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")));\n\nvar magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));\n\nvar inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));\n\nvar plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));\n\n;// CONCATENATED MODULE: ./node_modules/d3-scale-chromatic/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selectAll.js\n\n\n\n/* harmony default export */ function src_selectAll(selector) {\n  return typeof selector === "string"\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n      : new Selection([array(selector)], root);\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3-zoom/src/transform.js\nfunction transform_Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\ntransform_Transform.prototype = {\n  constructor: transform_Transform,\n  scale: function(k) {\n    return k === 1 ? this : new transform_Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new transform_Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";\n  }\n};\n\nvar transform_identity = new transform_Transform(1, 0, 0);\n\ntransform_transform.prototype = transform_Transform.prototype;\n\nfunction transform_transform(node) {\n  while (!node.__zoom) if (!(node = node.parentNode)) return transform_identity;\n  return node.__zoom;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-zoom/src/zoom.js\n\n\n\n\n\n\n\n\n\n\n// Ignore right-click, since that should open the context menu.\n// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event\nfunction zoom_defaultFilter(event) {\n  return (!event.ctrlKey || event.type === \'wheel\') && !event.button;\n}\n\nfunction zoom_defaultExtent() {\n  var e = this;\n  if (e instanceof SVGElement) {\n    e = e.ownerSVGElement || e;\n    if (e.hasAttribute("viewBox")) {\n      e = e.viewBox.baseVal;\n      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\n    }\n    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\n  }\n  return [[0, 0], [e.clientWidth, e.clientHeight]];\n}\n\nfunction defaultTransform() {\n  return this.__zoom || identity;\n}\n\nfunction defaultWheelDelta(event) {\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);\n}\n\nfunction zoom_defaultTouchable() {\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\n}\n\nfunction defaultConstrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n\n/* harmony default export */ function zoom() {\n  var filter = zoom_defaultFilter,\n      extent = zoom_defaultExtent,\n      constrain = defaultConstrain,\n      wheelDelta = defaultWheelDelta,\n      touchable = zoom_defaultTouchable,\n      scaleExtent = [0, Infinity],\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\n      duration = 250,\n      interpolate = interpolateZoom,\n      listeners = dispatch("start", "zoom", "end"),\n      touchstarting,\n      touchfirst,\n      touchending,\n      touchDelay = 500,\n      wheelDelay = 150,\n      clickDistance2 = 0,\n      tapDistance = 10;\n\n  function zoom(selection) {\n    selection\n        .property("__zoom", defaultTransform)\n        .on("wheel.zoom", wheeled, {passive: false})\n        .on("mousedown.zoom", mousedowned)\n        .on("dblclick.zoom", dblclicked)\n      .filter(touchable)\n        .on("touchstart.zoom", touchstarted)\n        .on("touchmove.zoom", touchmoved)\n        .on("touchend.zoom touchcancel.zoom", touchended)\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n  }\n\n  zoom.transform = function(collection, transform, point, event) {\n    var selection = collection.selection ? collection.selection() : collection;\n    selection.property("__zoom", defaultTransform);\n    if (collection !== selection) {\n      schedule(collection, transform, point, event);\n    } else {\n      selection.interrupt().each(function() {\n        gesture(this, arguments)\n          .event(event)\n          .start()\n          .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)\n          .end();\n      });\n    }\n  };\n\n  zoom.scaleBy = function(selection, k, p, event) {\n    zoom.scaleTo(selection, function() {\n      var k0 = this.__zoom.k,\n          k1 = typeof k === "function" ? k.apply(this, arguments) : k;\n      return k0 * k1;\n    }, p, event);\n  };\n\n  zoom.scaleTo = function(selection, k, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t0 = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,\n          p1 = t0.invert(p0),\n          k1 = typeof k === "function" ? k.apply(this, arguments) : k;\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\n    }, p, event);\n  };\n\n  zoom.translateBy = function(selection, x, y, event) {\n    zoom.transform(selection, function() {\n      return constrain(this.__zoom.translate(\n        typeof x === "function" ? x.apply(this, arguments) : x,\n        typeof y === "function" ? y.apply(this, arguments) : y\n      ), extent.apply(this, arguments), translateExtent);\n    }, null, event);\n  };\n\n  zoom.translateTo = function(selection, x, y, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;\n      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(\n        typeof x === "function" ? -x.apply(this, arguments) : -x,\n        typeof y === "function" ? -y.apply(this, arguments) : -y\n      ), e, translateExtent);\n    }, p, event);\n  };\n\n  function scale(transform, k) {\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n  }\n\n  function translate(transform, p0, p1) {\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n  }\n\n  function centroid(extent) {\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n  }\n\n  function schedule(transition, transform, point, event) {\n    transition\n        .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })\n        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })\n        .tween("zoom", function() {\n          var that = this,\n              args = arguments,\n              g = gesture(that, args).event(event),\n              e = extent.apply(that, args),\n              p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n              a = that.__zoom,\n              b = typeof transform === "function" ? transform.apply(that, args) : transform,\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n          return function(t) {\n            if (t === 1) t = b; // Avoid rounding error on end.\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n            g.zoom(null, t);\n          };\n        });\n  }\n\n  function gesture(that, args, clean) {\n    return (!clean && that.__zooming) || new Gesture(that, args);\n  }\n\n  function Gesture(that, args) {\n    this.that = that;\n    this.args = args;\n    this.active = 0;\n    this.sourceEvent = null;\n    this.extent = extent.apply(that, args);\n    this.taps = 0;\n  }\n\n  Gesture.prototype = {\n    event: function(event) {\n      if (event) this.sourceEvent = event;\n      return this;\n    },\n    start: function() {\n      if (++this.active === 1) {\n        this.that.__zooming = this;\n        this.emit("start");\n      }\n      return this;\n    },\n    zoom: function(key, transform) {\n      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);\n      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);\n      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);\n      this.that.__zoom = transform;\n      this.emit("zoom");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) {\n        delete this.that.__zooming;\n        this.emit("end");\n      }\n      return this;\n    },\n    emit: function(type) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new ZoomEvent(type, {\n          sourceEvent: this.sourceEvent,\n          target: zoom,\n          type,\n          transform: this.that.__zoom,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function wheeled(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var g = gesture(this, args).event(event),\n        t = this.__zoom,\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\n        p = pointer(event);\n\n    // If the mouse is in the same location as before, reuse it.\n    // If there were recent wheel events, reset the wheel idle timeout.\n    if (g.wheel) {\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n        g.mouse[1] = t.invert(g.mouse[0] = p);\n      }\n      clearTimeout(g.wheel);\n    }\n\n    // If this wheel event won’t trigger a transform change, ignore it.\n    else if (t.k === k) return;\n\n    // Otherwise, capture the mouse point and location at the start.\n    else {\n      g.mouse = [p, t.invert(p)];\n      interrupt(this);\n      g.start();\n    }\n\n    noevent(event);\n    g.wheel = setTimeout(wheelidled, wheelDelay);\n    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\n\n    function wheelidled() {\n      g.wheel = null;\n      g.end();\n    }\n  }\n\n  function mousedowned(event, ...args) {\n    if (touchending || !filter.apply(this, arguments)) return;\n    var currentTarget = event.currentTarget,\n        g = gesture(this, args, true).event(event),\n        v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),\n        p = pointer(event, currentTarget),\n        x0 = event.clientX,\n        y0 = event.clientY;\n\n    dragDisable(event.view);\n    nopropagation(event);\n    g.mouse = [p, this.__zoom.invert(p)];\n    interrupt(this);\n    g.start();\n\n    function mousemoved(event) {\n      noevent(event);\n      if (!g.moved) {\n        var dx = event.clientX - x0, dy = event.clientY - y0;\n        g.moved = dx * dx + dy * dy > clickDistance2;\n      }\n      g.event(event)\n       .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));\n    }\n\n    function mouseupped(event) {\n      v.on("mousemove.zoom mouseup.zoom", null);\n      dragEnable(event.view, g.moved);\n      noevent(event);\n      g.event(event).end();\n    }\n  }\n\n  function dblclicked(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var t0 = this.__zoom,\n        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),\n        p1 = t0.invert(p0),\n        k1 = t0.k * (event.shiftKey ? 0.5 : 2),\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);\n\n    noevent(event);\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);\n    else select(this).call(zoom.transform, t1, p0, event);\n  }\n\n  function touchstarted(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var touches = event.touches,\n        n = touches.length,\n        g = gesture(this, args, event.changedTouches.length === n).event(event),\n        started, i, t, p;\n\n    nopropagation(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      p = [p, this.__zoom.invert(p), t.identifier];\n      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\n      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\n    }\n\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\n\n    if (started) {\n      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n      interrupt(this);\n      g.start();\n    }\n  }\n\n  function touchmoved(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t, p, l;\n\n    noevent(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n    }\n    t = g.that.__zoom;\n    if (g.touch1) {\n      var p0 = g.touch0[0], l0 = g.touch0[1],\n          p1 = g.touch1[0], l1 = g.touch1[1],\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n      t = scale(t, Math.sqrt(dp / dl));\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n    }\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n    else return;\n\n    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));\n  }\n\n  function touchended(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t;\n\n    nopropagation(event);\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\n    for (i = 0; i < n; ++i) {\n      t = touches[i];\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n    }\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\n    else {\n      g.end();\n      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\n      if (g.taps === 2) {\n        t = pointer(t, this);\n        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {\n          var p = select(this).on("dblclick.zoom");\n          if (p) p.apply(this, arguments);\n        }\n      }\n    }\n  }\n\n  zoom.wheelDelta = function(_) {\n    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;\n  };\n\n  zoom.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;\n  };\n\n  zoom.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;\n  };\n\n  zoom.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n  };\n\n  zoom.scaleExtent = function(_) {\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\n  };\n\n  zoom.translateExtent = function(_) {\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\n  };\n\n  zoom.constrain = function(_) {\n    return arguments.length ? (constrain = _, zoom) : constrain;\n  };\n\n  zoom.duration = function(_) {\n    return arguments.length ? (duration = +_, zoom) : duration;\n  };\n\n  zoom.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\n  };\n\n  zoom.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? zoom : value;\n  };\n\n  zoom.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\n  };\n\n  zoom.tapDistance = function(_) {\n    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;\n  };\n\n  return zoom;\n}\n\n;// CONCATENATED MODULE: ./node_modules/d3-zoom/src/index.js\n\n\n\n;// CONCATENATED MODULE: ./node_modules/d3/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/data/load_periodic_table_data.js\n\n\nasync function load_periodic_table_data() {\n    let data = await dsv_csv("../data/periodic_table.csv");\n    // let float_dimensions = [\n    //     \'boiling_point\',\n    //     \'abundance/universe\',\n    //     \'conductivity/thermal\',\n    //     \'density/stp\',\n    //     \'ionization_energies/0\',\n    //     \'melting_point\',\n    //     \'electron_affinity\',\n    //     \'discovered/year\'\n    // ]\n    let float_dimensions = [\n        \'ionization_energies/0\',\n        \'abundance/universe\',\n\n        \'conductivity/thermal\',\n\n        \'discovered/year\',\n        \'density/stp\',\n    ]\n    let id_dimension = "name"\n    let error_values = ["", "0"]\n\n\n    let row_filtered_data = data.filter(row => {\n        return float_dimensions.every(dimension => {\n            return !error_values.includes(row[dimension])\n        })\n    })\n\n    // let row_filtered_data = data.filter(row => row["GDP: Gross domestic product (million current US$)"] !== "-99")\n    // row_filtered_data = row_filtered_data.filter(row => row["Surface area (km2)"] !== "-99");\n\n    let column_filtered_data = row_filtered_data.map(row => {\n        let filtered_row = {}\n        float_dimensions.forEach(dimension => {\n            filtered_row[dimension] = row[dimension]\n        })\n        return filtered_row\n    })\n\n    column_filtered_data.forEach(row => {\n        float_dimensions.forEach(dimension => {\n            row[dimension] = parseFloat(row[dimension])\n        })\n    })\n\n    column_filtered_data.forEach((row, index) => {\n        row["id"] = row_filtered_data[index][id_dimension]\n    })\n\n    return {\n        data: column_filtered_data,\n        dimensions: float_dimensions,\n    }\n}\n\n\n;// CONCATENATED MODULE: ./src/data/load_un_data.js\n\n\nasync function load_un_data() {\n    let data = await dsv_csv("../data/un_country_data.csv");\n    let float_dimensions = [\n        \'Surface area (km2)\',\n        \'Population in thousands (2017)\',\n        \'Population density (per km2, 2017)\',\n        \'GDP: Gross domestic product (million current US$)\',\n        \'GDP per capita (current US$)\',\n        \'International trade: Imports (million US$)\',\n        \'International trade: Exports (million US$)\',\n        \'International trade: Balance (million US$)\',\n        \'GDP growth rate (annual %, const. 2005 prices)\']\n    let id_dimension = "country"\n    let error_values = ["-99", "..."]\n\n    let row_filtered_data = data.filter(row => {\n        return float_dimensions.every(dimension => {\n            return !error_values.includes(row[dimension])\n        })\n    })\n\n    // let row_filtered_data = data.filter(row => row["GDP: Gross domestic product (million current US$)"] !== "-99")\n    // row_filtered_data = row_filtered_data.filter(row => row["Surface area (km2)"] !== "-99");\n\n    let column_filtered_data = row_filtered_data.map(row => {\n        let filtered_row = {}\n        float_dimensions.forEach(dimension => {\n            filtered_row[dimension] = row[dimension]\n        })\n        return filtered_row\n    })\n\n    column_filtered_data.forEach(row => {\n        float_dimensions.forEach(dimension => {\n            row[dimension] = parseFloat(row[dimension])\n        })\n    })\n\n    column_filtered_data.forEach((row, index) => {\n        row["id"] = row_filtered_data[index][id_dimension]\n        row["code"] = row_filtered_data[index]["iso3"]\n    })\n\n    return {\n        data: column_filtered_data,\n        dimensions: float_dimensions,\n    }\n}\n\n\n;// CONCATENATED MODULE: ./src/data/load_heatmap_csv.js\n\n\nasync function load_heatmap_data(suffix) {\n    let data = await dsv_csv("../data/heatmap_" + suffix + ".csv")\n    let dimensions = data.columns.filter(col => col !== "x" && col !== "y")\n    const rows = data.length;\n    for (let i = 0; i < rows; i++) {\n        for (const dimension of dimensions) {\n            data[i][dimension] = parseInt(data[i][dimension]);\n        }\n    }\n    return {\n        data: data,\n        // x and y axes cannot be split in a heatmap\n        dimensions: dimensions\n    }\n}\n;// CONCATENATED MODULE: ./src/data/load_numbeo_data.js\n\n\nasync function load_numbeo_data() {\n    let data = await dsv_csv("../data/country_indices.csv");\n    let float_dimensions = [\n        \'crime_index\', \'traffic_index\', \'rent_index\', \'groceries_index\',\n        \'restaurant_price_index\', \'pollution_index\', \'health_care_index\', \'quality_of_life_index\']\n    let id_dimension = "name"\n\n    let row_filtered_data = data.filter(row => row["quality_of_life_index"] !== "-1")\n\n    let column_filtered_data = row_filtered_data.map(row => {\n        let filtered_row = {}\n        float_dimensions.forEach(dimension => {\n            filtered_row[dimension] = row[dimension]\n        })\n        return filtered_row\n    })\n\n    column_filtered_data.forEach(row => {\n        float_dimensions.forEach(dimension => {\n            row[dimension] = parseFloat(row[dimension])\n        })\n    })\n\n    column_filtered_data.forEach((row, index) => {\n        row["id"] = row_filtered_data[index][id_dimension]\n        row["code"] = row_filtered_data[index]["iso3"]\n    })\n\n    return {\n        data: column_filtered_data,\n        dimensions: float_dimensions\n    }\n}\n\n\n;// CONCATENATED MODULE: ./src/ui/data_selection.js\n\n\n\n\n\n\nconst data_selector_ref = "#data-select";\n\nconst data_selection_map = {\n    periodic_table: load_periodic_table_data,\n    un_country_data: load_un_data,\n    numbeo_country_data: load_numbeo_data,\n    heatmap_data: () => load_heatmap_data("data"),\n    heatmap_denmark: () => load_heatmap_data("denmark"),\n    heatmap_europe: () => load_heatmap_data("europe")\n}\n\nasync function prepare_data_set(data_selection) {\n\n    let data_function = data_selection_map[data_selection]\n    let {data, dimensions} = await data_function();\n\n    let sorted_data = {}\n    for (let dimension of dimensions) {\n        let data_values = data.map(value => value[dimension])\n        data_values.sort(function (a, b) {\n            return a - b;\n        });\n        sorted_data[dimension] = data_values\n    }\n    return {data, dimensions, sorted_data}\n}\n\n\nasync function get_selected_data() {\n    let selection = src_select(data_selector_ref).property("value")\n    return await prepare_data_set(selection)\n}\n;// CONCATENATED MODULE: ./src/ui/dimension_selection.js\nconst dim_selector_ref = "#dimension-select";\n\n\nfunction set_up_dimensions_selector(dimensions) {\n    let dimension_selector = document.getElementById("dimension-select")\n    while (dimension_selector.firstChild) {\n        dimension_selector.removeChild(dimension_selector.firstChild)\n    }\n    for (let dimension of dimensions) {\n        const optionElement = document.createElement(\'option\');\n        optionElement.value = dimension;\n        optionElement.text = dimension;\n        optionElement.setAttribute("selected", "")\n        dimension_selector.appendChild(optionElement);\n    }\n}\n\nfunction get_selected_dimensions() {\n    let selected_options = Array.from(src_select(dim_selector_ref).property("selectedOptions"))\n    let selection = selected_options.map((option) => option.value)\n    return selection\n}\n\n\n;// CONCATENATED MODULE: ./src/mappings/linear_mapping.js\n\nclass LinearMapper {\n\n    //input_space_ranges is assumed to be continous- i.e. there are no gaps in the input space ranges\n    //output_range is a single range array with the smaller value first, and larger value second\n    constructor(input_space_ranges, output_range) {\n        this.input_ranges = input_space_ranges;\n        this.input_start = input_space_ranges[0][0];\n        this.input_end = input_space_ranges[input_space_ranges.length - 1][1];\n        this.output_range = output_range\n        this.d3_scale = linear_linear().domain([this.input_start, this.input_end]).range(output_range)\n    }\n    map(input) {\n        // let input_percentage = (input - this.input_start) / this.input_size\n        // let output = input_percentage * this.output_size + this.output_start\n        // return output\n        return this.d3_scale(input)\n    }\n\n    map_inverse(output) {\n        return this.d3_scale.invert(output)\n    }\n\n    get_input_space_ranges() {\n        return this.input_ranges\n    }\n\n    get_output_space_ranges() {\n        return [this.output_range]\n    }\n}\n;// CONCATENATED MODULE: ./src/mappings/util.js\nfunction is_unique(value, index, self) {\n    return self.indexOf(value) === index;\n    // return true\n}\n\nfunction is_value_in_range(value, range, min_value, max_value) {\n    let min_range = Math.min(range[0], range[1])\n    let max_range = Math.max(range[0], range[1])\n    if (value === min_value) {\n        return ((value >= min_range) && (value <= max_range))\n    } else if (value === max_value) {\n        return ((value >= min_range) && (value <= max_range))\n    }\n    return ((value >= min_range) && (value < max_range))\n}\n;// CONCATENATED MODULE: ./src/mappings/unique_index_mapping.js\n\nclass UniqueIndexMapper {\n    constructor(sorted_data) {\n        this.unique_data_values = sorted_data.filter(is_unique)\n    }\n    map(input) {\n        let index = this.unique_data_values.findIndex((value) => {\n            return input === value\n        })\n        return index\n    }\n\n    map_inverse(output) {\n        return this.unique_data_values[output]\n    }\n\n    get_input_space_ranges() {\n        let ranges = []\n        let last_split = this.unique_data_values[0]\n        for (let i = 0; i < this.unique_data_values.length - 1; i++) {\n            let mean = (this.unique_data_values[i] + this.unique_data_values[i+1])/2\n            ranges.push([last_split, mean])\n            last_split = mean\n        }\n        ranges.push([last_split, this.unique_data_values[this.unique_data_values.length-1]])\n        return ranges\n    }\n\n    get_output_space_ranges() {\n        let ranges = []\n        ranges.push([0, 0.5])\n        for (let i = 0; i < this.unique_data_values.length - 1; i++) {\n            ranges.push([i + 0.5, i + 1.5])\n        }\n\n        ranges.push([this.unique_data_values.length - 1.5, this.unique_data_values.length - 1])\n        return ranges\n    }\n}\n;// CONCATENATED MODULE: ./src/mappings/composite_mapping.js\nclass CompositeMapper {\n\n    //Takes a list of mappers, and applies them one after the other\n    constructor(list_of_mappers) {\n        this.mappers = list_of_mappers\n\n    }\n    map(input) {\n        let output = input;\n        for (let mapper of this.mappers) {\n            output = mapper.map(output)\n        }\n        return output\n    }\n\n    map_inverse(output) {\n        let input = output;\n        for (let mapper of [...this.mappers].reverse()) {\n            input = mapper.map_inverse(input)\n        }\n        return input\n    }\n\n    get_input_space_ranges() {\n        return this.mappers[0].get_input_space_ranges();\n    }\n\n    get_output_space_ranges() {\n        return this.mappers[this.mappers.length - 1].get_output_space_ranges();\n    }\n}\n;// CONCATENATED MODULE: ./src/mappings/proportionate_split_mapping.js\n\n\n\nclass ProportionateSplitMapper {\n\n    constructor(sorted_data, split_points) {\n        this.min = sorted_data[0];\n        this.max = sorted_data[sorted_data.length - 1]\n        let points = [this.min, ...split_points, this.max]\n        this.input_ranges = []\n        for (let i = 0; i < points.length - 1; i++) {\n            this.input_ranges.push([points[i], points[i+1]])\n        }\n\n        //Calculate how many percent of points is in each range\n        let proportions = this.input_ranges.map((range) => {\n            let points_in_range = sorted_data.filter((data_point) => {\n                return is_value_in_range(data_point, range, this.min, this.max)\n            })\n            let percent_points_in_range = points_in_range.length / sorted_data.length\n            return percent_points_in_range\n        })\n\n        //Create proportional mapping from 0 to 1\n        this.output_ranges = []\n        this.piecewise_linear_maps = []\n        let proportions_processed = 0;\n        for (let i = 0; i < proportions.length; i++) {\n            let proportion = proportions[i]\n            let input_range = this.input_ranges[i]\n            let output_range = [proportions_processed, proportions_processed + proportion]\n            let piecewise_linear_map = new LinearMapper([input_range], output_range)\n            this.output_ranges.push(output_range)\n            this.piecewise_linear_maps.push(piecewise_linear_map)\n            proportions_processed += proportion\n\n        }\n    }\n    map(input) {\n        for (let i = 0; i < this.input_ranges.length; i++) {\n            let range = this.input_ranges[i]\n            if (is_value_in_range(input, range, this.min, this.max)) {\n                let range_mapper = this.piecewise_linear_maps[i]\n                let output = range_mapper.map(input)\n                return output\n            }\n        }\n    }\n\n    map_inverse(output) {\n        let output_min = this.map(this.min)\n        let output_max = this.map(this.max)\n        for (let i = 0; i < this.output_ranges.length; i++) {\n            let range = this.output_ranges[i]\n            if (is_value_in_range(output, range, output_min, output_max)) {\n                let range_mapper = this.piecewise_linear_maps[i]\n                let input = range_mapper.map_inverse(output)\n                return input\n            }\n        }\n    }\n\n    get_input_space_ranges() {\n        return this.input_ranges\n    }\n\n    get_output_space_ranges() {\n        return this.output_ranges\n    }\n}\n\n;// CONCATENATED MODULE: ./src/algorithms/greedy_guided_split/greedy_guided_split.js\n\n\n\n\n\n\nfunction greedy_guided_split(sorted_data, weights, dimension) {\n    console.log(dimension)\n    let suggested_split_points = sorted_data;\n    let input_range = [sorted_data[0], sorted_data[sorted_data.length - 1]]\n    let linear_mapper = new LinearMapper([input_range], [0, 1])\n    let unique_index_mapper = new UniqueIndexMapper(sorted_data)\n    let extreme_mapper = new CompositeMapper([\n        unique_index_mapper,\n        new LinearMapper(unique_index_mapper.get_output_space_ranges(), [0, 1])\n    ])\n\n    let metrics_without_splits = compute_metrics(sorted_data, linear_mapper, linear_mapper, extreme_mapper)\n    let metric_without_splits = compute_total_metric(metrics_without_splits, weights)\n\n    let current_best_metric = metric_without_splits\n    let confirmed_splits = []\n    let current_best_mapper = linear_mapper;\n    let current_best_metrics = metrics_without_splits\n    let improving = true\n    while (improving) {\n        improving = false;\n        let current_best_splits = confirmed_splits\n        for (let split_point of suggested_split_points) {\n            if (current_best_splits.includes(split_point)) {\n                continue\n            }\n\n\n\n            let suggested_splits = insert_split(confirmed_splits, split_point)\n            let current_mapper = new ProportionateSplitMapper(sorted_data, suggested_splits)\n            let metrics = compute_metrics(sorted_data, current_mapper, linear_mapper, extreme_mapper)\n            let current_metric = compute_total_metric(metrics, weights)\n            if (current_metric < current_best_metric) {\n                console.log("improved")\n                console.log("improvement: ", current_best_metric - current_metric)\n                improving = true\n                current_best_metric = current_metric\n                current_best_splits = suggested_splits\n                current_best_mapper = current_mapper\n                current_best_metrics = metrics\n            }\n        }\n        if (improving) {\n            confirmed_splits = current_best_splits\n        }\n    }\n\n    console.log(weights)\n    console.log(metrics_without_splits)\n    console.log(metric_without_splits)\n    console.log(current_best_metrics)\n    console.log(current_best_metric)\n    console.log("improvement: ", metric_without_splits - current_best_metric)\n    return current_best_mapper\n}\n\nfunction insert_split(splits, new_split) {\n    splits = [...splits, new_split]\n    splits.sort(function (a, b) {\n        return a - b;\n    });\n\n    return splits\n}\n\nfunction compute_metrics(data, current_mapping, linear_mapping, extreme_mapping) {\n    let fragmentation = current_mapping.get_output_space_ranges().length - 1\n\n    // Consider if skewness should be difference squared instead\n    let distortion = mapping_difference(data, current_mapping, linear_mapping)\n    let skewness = mapping_difference(data, current_mapping, extreme_mapping)\n\n    return {\n        skewness,\n        distortion,\n        fragmentation,\n    }\n}\n\nfunction compute_total_metric(metrics, weights) {\n    return metrics.skewness * weights.skewness + metrics.distortion * weights.distortion + metrics.fragmentation * weights.fragmentation\n}\n\nfunction mapping_difference(data, mapping1, mapping2) {\n    let summed_diff = 0\n    for (let i = 0; i < data.length; i++) {\n        let input = data[i]\n        let output1 = mapping1.map(input)\n        let output2 = mapping2.map(input)\n        let diff = Math.abs(output1 - output2)\n        summed_diff += diff\n    }\n    return summed_diff / data.length\n}\n\nfunction read_greedy_guided_split_args() {\n    let weights = {}\n    weights["distortion"] = parseFloat(src_select("#distortion input").property("value"))\n    weights["fragmentation"] = parseFloat(src_select("#fragmentation input").property("value"))\n    weights["skewness"] = parseFloat(src_select("#skewness input").property("value"))\n    return weights\n}\n;// CONCATENATED MODULE: ./src/algorithms/hardcoded_splits.js\n\n\nconst hardcoded_numbeo_range = {\n    \'crime_index\': [[0, 100]],\n    \'traffic_index\': [[0, 320]],//unbounded max\n    // \'rent_index\': [[0, 101]],\n    \'rent_index\': [[0, 20], [20, 101]],\n    \'groceries_index\': [[0, 150]],//unbounded max, 100 is new york\n    \'restaurant_price_index\': [[0, 170]],//unbounded max, 100 is new york\n    \'pollution_index\': [[0, 100]],//actual values seem to be going to 113?\n    \'health_care_index\': [[0, 100]],\n    \'quality_of_life_index\': [[0, 200]],//unbounded\n}\n\nconst hardcoded_un_range = {\n    \'Surface area (km2)\': [[26, 10000], [10000, 17098246]],\n    \'Population in thousands (2017)\': [[5, 50000], [50000, 1409517]],\n    \'Population density (per km2, 2017)\': [[0.1, 500], [500, 20821.6]],\n    \'GDP: Gross domestic product (million current US$)\': [[33, 1000000], [100000, 18036648]],\n    \'International trade: Balance (million US$)\': [[-796494, -100000], [-100000, 40000], [40000, 530285]],\n    \'International trade: Exports (million US$)\': [[0, 60000], [60000, 2118981]],\n    \'International trade: Imports (million US$)\': [[12, 60000], [60000, 2249661]],\n    \'GDP growth rate (annual %, const. 2005 prices)\': [[-28.1, 0], [0, 10], [10, 26.3]],\n    \'GDP per capita (current US$)\': [[144.5, 10000], [10000, 45000], [45000, 100160.8]]\n}\n\nconst hardcoded_animals_range = {\n    \'Overall Sample Size \': [[0, 850], [850, 1650], [1650, 3406]],\n    \'Overall MLE\': [[2, 22], [22, 47]],\n    \'Overall CI - lower\': [[2, 18], [18, 38]],\n    \'Overall CI - upper\': [[2.5, 20], [20, 53]],\n    \'Male Sample Size\': [[26, 50], [50, 360], [360, 1425]],\n    \'Male MLE\': [[2.5, 19], [19, 51.5]],\n    \'Male CI - lower\': [[2, 18], [18, 41.5]],\n    \'Male CI - upper\': [[2.5, 25], [25, 55]]\n}\n\nconst hardcoded_periodic_table_splits = {\n    \'boiling_point\': [400],\n    \'abundance/universe\': [ 8e-7,  8e-5, 8e-3, 8e-1, ],\n    \'conductivity/thermal\': [1, 250],\n    \'density/stp\': [2.25],\n    \'ionization_energies/0\': [],\n    \'melting_point\': [100],\n    \'electron_affinity\': [],\n    \'discovered/year\': [1650]\n}\n\nfunction hardcoded_periodic_table_get_mapper(data, args, dimension) {\n    let mapper = new ProportionateSplitMapper(data, hardcoded_periodic_table_splits[dimension])\n    return mapper\n}\n;// CONCATENATED MODULE: ./src/algorithms/quantile_splits.js\n\n\nfunction quantile_splits(sorted_data, args) {\n    let unique_data = [...new Set(sorted_data)]\n    let number_of_splits = args["clusters"]\n    let n_elements = Math.floor(unique_data.length / number_of_splits)\n    let split_points = []\n    for (let i = 1; i < number_of_splits; i++) {\n        let left_border_value = unique_data[i * n_elements]\n        let right_border_value = unique_data[i * n_elements + 1]\n        let split_point = left_border_value + ((right_border_value - left_border_value) / 2)\n        split_points.push(split_point)\n    }\n\n    return new ProportionateSplitMapper(sorted_data, split_points)\n}\n\n;// CONCATENATED MODULE: ./src/algorithms/kmeans_split.js\n\n\nlet init_map = {\n    "random": (sorted_data, k) => lloyds_1d(sorted_data, k, rand_init),\n    "++": (sorted_data, k) => lloyds_1d(sorted_data, k, kMeansPlusPlus1D),\n    "optimal": optimal_kmeans_1d\n}\n\n// In general for kmeans, k = number of clusters\nfunction kmeans_splits(sorted_data, args, _, version="++") {\n    let k = args["clusters"]\n    let centers = init_map[version](sorted_data, k)\n    let split_points = compute_split_points(sorted_data, centers);\n    return new ProportionateSplitMapper(sorted_data, split_points)\n}\n\nfunction compute_split_points(sorted_data, centers) {\n    // let clusters = get_clusters(sorted_data, centers)\n    // let cluster_starts = [], cluster_ends = []\n    // for (const cluster of clusters) {\n    //     cluster_starts.push(Math.min(cluster))\n    //     cluster_ends.push(Math.max(cluster))\n    // }\n    let k = centers.length\n    let split_points = []\n    centers = [...new Set(centers)]\n    centers.sort((a, b) => a - b)\n    for (let i = 0; i < k - 1; i++) {\n        split_points.push(((centers[i + 1] - centers[i]) / 2) + centers[i])\n    }\n    return split_points.filter(point => !isNaN(point) && point !== Infinity)\n}\n\nfunction get_clustering_from_centers(data, centers) {\n    let clustering_assignments = cluster_assigment(data, centers);\n    let clusters = new Array(centers.length)\n    for (let i = 0; i < centers.length; i++) {\n        clusters[i] = []\n    }\n    for (let i = 0; i < data.length; i++) {\n        clusters[clustering_assignments[i]].push(data[i])\n    }\n    return clusters\n}\n\nfunction cluster_assigment(data, centers) {\n    let clustering = new Array(data.length)\n    for (let i = 0; i < data.length; i++) {\n        let x = data[i]\n        clustering[i] = 0\n        for (let j = 0; j < centers.length; j++) {\n            if (Math.abs(x - centers[j]) < Math.abs(x - centers[clustering[i]])) {\n                clustering[i] = j\n            }\n        }\n    }\n    return clustering\n}\n\nfunction lloyds_1d(data, k, init_function=kMeansPlusPlus1D, max_iter=10) {\n    var centers = init_function(data, k)\n    var change_in_centers = true\n    var iters = 0\n    while (change_in_centers && iters < max_iter) {\n        let clustering = cluster_assigment(data, centers)\n        let new_centers = Array(k).fill(0)\n        let cluster_sizes = Array(k).fill(0)\n        for (let i = 0; i < data.length; i++) {\n            new_centers[clustering[i]] += data[i]\n            cluster_sizes[clustering[i]] += 1\n        }\n        for (let i = 0; i < k; i++) {\n            new_centers[i] = new_centers[i] / cluster_sizes[i]\n        }\n        let total_center_difference = 0\n        for (let i = 0; i < k; i++) {\n            total_center_difference += Math.abs(new_centers[i] - centers[i])\n        }\n        if (total_center_difference < 0.001) {\n            change_in_centers = false\n        }\n        centers = new_centers\n        iters++\n    }\n    return centers\n}\n\nfunction rand_init(sorted_data, k) {\n    let centers = []\n    let non_picked_values = sorted_data\n    for (let i = 0; i < k; i++) {\n        const randomInt = Math.floor(Math.random() * sorted_data.length);\n        centers.push(sorted_data[randomInt])\n        non_picked_values = non_picked_values.filter(item => item !== sorted_data[randomInt])\n    }\n    return centers\n}\n\n// Initialize centers with k-means++ method\nfunction kMeansPlusPlus1D(sorted_data, k) {\n    let centers = [sorted_data[Math.floor(Math.random() * sorted_data.length)]];\n    for (let i = 1; i < k; i++) {\n        let distances = [];\n        let totalSquaredDistance = 0;\n\n        // Calculate distances from each point to the closest centroid\n        for (let j = 0; j < sorted_data.length; j++) {\n            let minDistance = Infinity;\n            for (let l = 0; l < centers.length; l++) {\n                let distance = Math.abs(sorted_data[j] - centers[l]);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                }\n            }\n            distances[j] = minDistance;\n            totalSquaredDistance += minDistance ** 2;\n        }\n\n        // Choose new centroid based on probability proportional to distance squared\n        let cumulativeProbability = 0;\n        let chosenIndex = -1;\n        let randomValue = Math.random();\n        for (let j = 0; j < distances.length; j++) {\n            cumulativeProbability += distances[j] ** 2 / totalSquaredDistance;\n            if (randomValue <= cumulativeProbability) {\n                chosenIndex = j;\n                break;\n            }\n        }\n\n        centers.push(sorted_data[chosenIndex]);\n    }\n\n    return centers;\n}\n\n// from and to are both included in the segment\nfunction faster_single_cluster_cost(cum_sum, square_cum_sum, from, to) {\n    if (from + 1 === to) return 0\n    let squared_sum = (cum_sum[to] - cum_sum[from]) ** 2\n    let sum_of_squares = square_cum_sum[to] - square_cum_sum[from]\n    let factor = 1.0 / (to - from)\n    return sum_of_squares - factor * squared_sum\n}\n\nfunction mean(points) {\n    return points.reduce((a, b) => a + b, 0) / points.length;\n}\n\nfunction single_cluster_cost(points) {\n    let center = mean(points);\n    // Calculate total squared distance to mean\n    return points.reduce((total, point) => total + (point - center) ** 2, 0)\n}\n\n// Based on building a dynamic programming table of optimal k-means clustering of n points\n// Each cell only depends on the cells to the left of it in the previous row of the table\nfunction optimal_kmeans_1d(sorted_data, k) {\n    const n = sorted_data.length\n    let cost_table = [[-1]].concat(Array(k).fill(null).map(() => Array(n + 1).fill(0)));\n    let segment_table = [[-1]].concat(Array(k).fill(null).map(() => Array(n + 1).fill(0)));\n    // Init first row with 1 cluster error\n    for (let i = 1; i <= n; i++) {\n        cost_table[1][i] = single_cluster_cost(sorted_data.slice(0, i))\n    }\n    // Precompute cumulative sum of points and their squares for simpler computation of means\n    let cum_sum = sorted_data.map(point => [point]).reduce((acc, point) => acc.concat([point[0] + acc[acc.length - 1]]), [0])\n    let square_cum_sum = sorted_data.map(point => [point]).reduce((acc, point) => acc.concat([point[0] ** 2 + acc[acc.length - 1]]), [0])\n    // Fill tables\n    for (let m = 2; m <= k; m++) {\n        for (let i = m + 1; i <= n; i++) {\n            let optimal_cost_so_far = Infinity\n            let splitting_point = 0\n            // Look up cells to the left in the previous row\n            for (let j = m - 1; j < i; j++) {\n                let optimal_cost_first_j_points = cost_table[m - 1][j]\n                let new_cluster_from_j_to_i_cost = faster_single_cluster_cost(cum_sum, square_cum_sum, j + 1, i + 1)\n                let combined_cost = optimal_cost_first_j_points + new_cluster_from_j_to_i_cost\n                if (combined_cost < optimal_cost_so_far) {\n                    optimal_cost_so_far = combined_cost\n                    splitting_point = j\n                }\n            }\n            cost_table[m][i] = optimal_cost_so_far\n            segment_table[m][i] = splitting_point\n        }\n    }\n    // Construct centers based on reversing through segment table\n    let next_segment_start = n\n    let centers = []\n    for (let m = k; m > 0; m--) {\n        let segment_start = segment_table[m][next_segment_start - 1]\n        let cluster = sorted_data.slice(segment_start, next_segment_start)\n        let center = mean(cluster)\n        centers.push(center)\n        next_segment_start = segment_start\n    }\n    return centers\n}\n\n;// CONCATENATED MODULE: ./src/ui/algorithm_selection.js\n\n\n\n\n\n\n\nconst algo_selector_ref = "#algorithm-select";\nlet read_number_of_clusters = () => ({clusters: parseInt(src_select("#clusters input").property("value"))})\n\nlet algorithm_selection_map = {\n    greedy_guided_split: {\n        algo: greedy_guided_split,\n        arguments_id: "#greedy_guided_split_arguments",\n        read_args: read_greedy_guided_split_args},\n    hardcoded_periodic_table: {\n        algo: hardcoded_periodic_table_get_mapper,\n        arguments_id: null,\n        read_args: () => {},\n    },\n    quantile: {\n        algo: quantile_splits,\n        arguments_id: "#greedy_guided_split_arguments",\n        read_args: read_number_of_clusters\n    },\n    kmeans: {\n        algo: (sorted_data, args, dimension) => kmeans_splits(sorted_data, args, dimension, "random"),\n        arguments_id: "#greedy_guided_split_arguments",\n        read_args: read_number_of_clusters\n    },\n    kmeans_plusplus: {\n        algo: (sorted_data, args, dimension) => kmeans_splits(sorted_data, args, dimension, "++"),\n        arguments_id: "#greedy_guided_split_arguments",\n        read_args: read_number_of_clusters\n    },\n    kmeans_opt: {\n        algo: (sorted_data, args, dimension) => kmeans_splits(sorted_data, args, dimension, "optimal"),\n        arguments_id: "#greedy_guided_split_arguments",\n        read_args: read_number_of_clusters\n    },\n    none: {\n        algo: (sorted_data, args, dimension) => {\n            return new LinearMapper([[sorted_data[0], sorted_data[sorted_data.length - 1]]], [0, 1])\n        },\n        arguments_id: null,\n        read_args: () => {},\n    }\n}\n\nfunction algorithm_selection_update(arguments_id) {\n    let args = src_select("#arguments_div").selectChildren();\n    args.style("display", "none")\n    if (arguments_id !== null) {\n        src_select(arguments_id).style("display", null)\n    }\n}\n\nfunction get_selected_algorithm() {\n    return algorithm_selection_map[src_select(algo_selector_ref).property("value")]\n}\n// EXTERNAL MODULE: ./src/usageDataCollector.js\nvar usageDataCollector = __webpack_require__(289);\n;// CONCATENATED MODULE: ./src/mappings/screen_mapping.js\n\n\n\nclass ScreenMapper {\n\n    constructor(input_space_ranges, output_range, buffer_size) {\n        let input_range_size = input_space_ranges.reduce((acc, range) => acc + (range[1] - range[0]), 0)\n        this.input_start = input_space_ranges[0][0]\n        this.input_end = input_space_ranges[input_space_ranges.length - 1][1]\n\n        let num_gaps = input_space_ranges.length - 1;\n        let output_start = output_range[0]\n        let output_end = output_range[1]\n        let output_size = Math.abs(output_end - output_start) - num_gaps * buffer_size;\n        this.reverse = output_start > output_end\n        this.output_start = output_start;\n        this.output_end = output_end\n\n        this.inner_mappers = []\n        let current_output = output_start\n        for (let range of input_space_ranges) {\n            let range_size = range[1] - range[0];\n            let range_percent = range_size / input_range_size\n            let new_output_range_size = output_size * range_percent\n            let new_output_range_end;\n            if (this.reverse) {\n                new_output_range_end = current_output - new_output_range_size\n            }\n             else {\n                 new_output_range_end = current_output + new_output_range_size\n            }\n            let mapper = new LinearMapper([range], [current_output, new_output_range_end])\n            this.inner_mappers.push(mapper)\n            current_output = new_output_range_end\n            if (this.reverse) {\n                current_output -= buffer_size\n            } else {\n                current_output += buffer_size\n            }\n        }\n    }\n    map(input) {\n        let input_range_index = this.get_input_space_ranges().findIndex((range) =>\n            is_value_in_range(input, range, this.input_start, this.input_end))\n        // console.log(input_range_index)\n        return this.inner_mappers[input_range_index].map(input)\n    }\n\n    map_inverse(output) {\n        let output_range_index = this.get_output_space_ranges().findIndex((range) =>\n            is_value_in_range(output, range, this.output_start, this.output_end))\n        return this.inner_mappers[output_range_index].map_inverse(output)\n    }\n\n    get_input_space_ranges() {\n        return this.inner_mappers.map((inner_mapper) => {\n            return inner_mapper.get_input_space_ranges()[0]\n        })\n    }\n\n    get_output_space_ranges() {\n        return this.inner_mappers.map((inner_mapper) => {\n            return inner_mapper.get_output_space_ranges()[0]\n        })\n    }\n\n\n}\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/native.js\nconst randomUUID = typeof crypto !== \'undefined\' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ const esm_browser_native = ({\n  randomUUID\n});\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.\n    getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \'-\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \'-\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \'-\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \'-\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it\'s likely due to one\n  // of the following:\n  // - One or more input array values don\'t map to a hex octet (leading to\n  // "undefined" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError(\'Stringified UUID is invalid\');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const esm_browser_stringify = ((/* unused pure expression or super */ null && (stringify)));\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\n\nfunction v4(options, buf, offset) {\n  if (esm_browser_native.randomUUID && !buf && !options) {\n    return esm_browser_native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\n/* harmony default export */ const esm_browser_v4 = (v4);\n;// CONCATENATED MODULE: ./src/plots/spc.js\n\n\n\n\n\n\n\nlet highlight_colour = "rgba(255, 0, 0, 0.4)"\nlet standard_colour = "rgba(70, 130, 180, 0.4)"\n\nclass SPC {\n    constructor(container_ref, data, dimensions, raw_mappers) {\n        this.container_ref\n        this.data = data\n        this.dimensions = dimensions\n        this.brushes = {}\n        for (let dimension of dimensions) {\n            this.brushes[dimension] = []\n            for (let i = 0; i < raw_mappers[dimension].get_output_space_ranges().length; i++) {\n                this.brushes[dimension][i] = []\n            }\n        }\n\n\n        let container = document.querySelector(container_ref)\n        let plot = document.createElement("div")\n        plot.classList.add("par_coords")\n        plot.id = "plot_id_" + esm_browser_v4()\n        this.id = "#" + plot.id\n        container.appendChild(plot)\n\n        let buffer_size = 20;\n        let margin = {top: 24, right: 48, bottom: 16, left: 48};\n        this.margin = margin\n        let width = plot.clientWidth - margin.left - margin.right;\n        let height = plot.clientHeight - margin.top - margin.bottom;\n\n        this.mappers = {}\n        Object.entries(raw_mappers).forEach((entry) => {\n            let dim = entry[0]\n            let mapper = entry[1]\n            let screen_mapper = new ScreenMapper(mapper.get_output_space_ranges(), [height, 0], buffer_size)\n            this.mappers[dim] = new CompositeMapper([mapper, screen_mapper])\n        })\n\n        this.x = point().domain(dimensions).range([0, width])\n        this.foreground;\n        this.background;\n\n    }\n\n    delete() {\n        src_select("svg").remove()\n    }\n\n    draw() {\n        let _this = this\n        let svg = src_select(this.id).append("svg")\n            .attr("class", "parcoordsSvg")\n            .append("g")\n            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")")\n            .on(\'mouseleave\', function (d) {\n                src_select("#hoverBox")\n                    .style("visibility", "hidden")\n            });\n\n        //Add grey background lines for context.\n        this.background = svg.append("g")\n            .attr("class", "background")\n            .selectAll("path")\n            .data(this.data)\n            .enter().append("path")\n            .attr("d", this.path.bind(this));\n\n\n        // Add coloured foreground lines for focus.\n        this.foreground = svg.append("g")\n            .attr("class", "foreground")\n            .selectAll("path")\n            .data(this.data)\n            .enter().append("path")\n            .attr("d", this.path.bind(this))\n            // make the cursor a pointer when hovering the lines\n            .attr("pointer-events", "visiblePainted")\n            .attr("cursor", "pointer")\n            .attr("stroke-width", "2px")\n            //handle hover and click events\n            .on(\'mouseover\', this.onHoverLine.bind(this));\n\n        this.highlighted = svg.append("g")\n            .attr("class", "highlighted")\n            .selectAll("path")\n            .data(this.data)\n            .enter().append("path")\n            .attr("d", this.path.bind(this))\n            // make the cursor a pointer when hovering the lines\n            .attr("pointer-events", "visiblePainted")\n            .attr("cursor", "pointer")\n            .attr("stroke-width", "2px")\n            //handle hover and click events\n            .on(\'mouseover\', this.onHoverLine.bind(this));\n\n        // Add a group element for each dimension.\n        let axis_groups = svg.selectAll(".dimension")\n            .data(this.dimensions)\n            .enter().append("g")\n            .attr("class", "dimension")\n            .attr("transform", function (dimension_name) {\n                return "translate(" + _this.x(dimension_name) + ")";\n            })\n\n        // Add a title for each dimension.\n        axis_groups.append("text")\n            .style("text-anchor", "middle")\n            .style("font-weight", 400)\n            .style("overflow", "visible")\n            .attr("y", -8)\n            .text(function (dimension_name) {\n                return dimension_name;\n            });\n\n        let axes = axis_groups.selectAll(".axis")\n            .data(function (d) {\n                return _this.mappers[d].get_input_space_ranges()\n            })\n            .enter().append("g")\n            .attr("class", "axis")\n            .each(function (_, index) {\n                let dim = this.parentNode.__data__\n                let screen_range = _this.mappers[dim].get_output_space_ranges()[index]\n                // let screen_span = screen_range[0] - screen_range[1]\n                // let num_ticks = Math.floor(screen_span / 100.0)\n                let input_ranges = _this.mappers[dim].get_input_space_ranges()\n                let tick_values = []\n                if (index === 0) {\n                    tick_values = input_ranges[index];\n                } else if (index === input_ranges.length - 1) {\n                    tick_values = [input_ranges[index][1]];\n                } else {\n                    tick_values = [input_ranges[index][1]];\n                }\n                let input_scale = _this.mappers[dim].get_input_space_ranges()[index]\n                let output_scale = _this.mappers[dim].get_output_space_ranges()[index]\n                let d3_scale = linear_linear().domain(input_scale).range(output_scale)\n\n                src_select(this).call(axisLeft().scale(d3_scale).tickValues(tick_values).tickSize(15));\n            })\n        // Add and store a brush for each axis, allows the dragging selection on each axis.\n        let brush_group = axes.append("g")\n            .attr("class", "brush")\n            .attr("cursor", "pointer")\n            .attr("transform", `translate(${-8}, 0)`)\n\n        let brush_overlays = brush_group.append(\'rect\')\n            .attr("width", 16)\n            .attr("class", "brush_overlay")\n            .attr(\'fill\', "rgba(70, 130, 180, 0.2)")\n            .attr(\'height\', 10)\n\n        brush_group.each((data, i, nodes) => {\n            let _this = src_select(nodes[i])\n            let par_coords = this;\n            let dimension = nodes[i].parentNode.parentNode.__data__;\n            // let brush_field = _this.selectChild(".brush_field");\n            // let brush_range = par_coords.y[dimension][i].range()\n            let brush_range = par_coords.mappers[dimension].get_output_space_ranges()[i]\n            let brush_start = Math.min(brush_range[0], brush_range[1])\n            let brush_end = Math.max(brush_range[0], brush_range[1])\n            console.log(dimension, i, brush_start)\n            let brush_overlay = _this.selectChild(".brush_overlay")\n                .attr("height", Math.floor(Math.abs(brush_range[0] - brush_range[1])))\n                .attr("y", brush_start)\n            brush_overlay.call(drag()\n                .on(\'start\', (event, data) => {\n                    console.log("drag start: ", event.y)\n                    let new_index =  par_coords.brushes[dimension][i].length\n                    let brush_field_group = _this.append("g")\n                        .attr(\'data-i\', new_index)\n                        .attr("transform", `translate(0, ${event.y})`)\n                        .attr("data-y", event.y)\n\n                    let brush_field = brush_field_group.append("rect")\n                        .attr("width", 16)\n                        .attr("height", 0)\n                        // .attr("y", event.y)\n                        .attr("class", "brush_field")\n                        .attr(\'fill\', "rgba(255, 130, 180, 0.5)")\n\n                    let brush_field_bottom = brush_field_group.append("rect")\n                        .attr("width", 16)\n                        .attr("height", 8)\n                        .attr("class", "brush_field_edge")\n                        .attr(\'fill\', "rgba(255, 130, 180, 0.5)")\n                        .attr(\'cursor\', \'row-resize\')\n                        .call(drag()\n                            // .container(_this)\n                            .on(\'drag\', (event, data) => {\n                                console.log("dragging bot")\n                                console.log(event.y)\n                                let old_y = parseInt(brush_field_bottom.attr("y"))\n                                let old_height = parseInt(brush_field.attr("height"))\n                                let new_height = old_height + event.dy\n                                let new_bottom_y = old_y + event.dy\n\n                                if (new_height < 16) {\n                                    let diff = 16 - new_height\n                                    new_height = 16\n                                    new_bottom_y += diff\n                                } else if (new_bottom_y > brush_end) {\n                                    let diff = new_bottom_y - brush_end\n                                    new_bottom_y = brush_end\n                                    new_height -= diff\n                                }\n                                brush_field_bottom.attr("y", new_height - 8)\n                                brush_field.attr("height", new_height)\n\n                                let old_brush_selection = par_coords.brushes[dimension][i][new_index]\n                                par_coords.brushes[dimension][i][new_index] = [old_brush_selection[0], new_bottom_y]\n                                par_coords.brushed()\n                            }))\n\n                    let brush_field_top = brush_field_group.append("rect")\n                        .attr("width", 16)\n                        .attr("height", 8)\n                        .attr("class", "brush_field_edge")\n                        .attr(\'fill\', "rgba(255, 130, 180, 0.5)")\n                        .attr(\'cursor\', \'row-resize\')\n                        .call(drag()\n                            .container(brush_field_group)\n                            .on(\'drag\', (event, data) => {\n                                console.log("dragging top")\n                                console.log(event.y)\n                                let old_y = parseInt(brush_field_group.attr("data-y"))\n                                let new_y = old_y + event.dy\n                                let old_height = parseInt(brush_field.attr("height"))\n                                let new_height = old_height - event.dy\n\n                                if (new_y < brush_start) {\n                                    let diff = brush_start - new_y\n                                    new_y = brush_start\n                                    new_height -= diff\n                                } else if (new_height < 16) {\n                                    let diff = 16 - new_height\n                                    new_height = 16\n                                    new_y -= diff\n                                }\n\n                                brush_field_group.attr("transform", `translate(0, ${new_y})`)\n                                    .attr("data-y", new_y)\n                                brush_field_bottom.attr("y", new_height - 8)\n\n                                brush_field.attr("height", new_height)\n\n                                par_coords.brushes[dimension][i][new_index] = [new_y, new_y + new_height]\n                                par_coords.brushed()\n                            }))\n\n\n\n                    brush_field_group.call(drag()\n                        .on(\'drag\', (event, data) => {\n                            console.log("dragging whole")\n                            console.log(event.y)\n                            let old_y = parseInt(brush_field_group.attr("data-y"))\n                            let new_y = old_y + event.dy\n                            let height = parseInt(brush_field.attr("height"))\n                            let bottom_y = new_y + height\n\n                            if (new_y < brush_start) {\n                                new_y = brush_start\n                                bottom_y = new_y + height\n                            } else if (bottom_y > brush_end) {\n                                new_y = brush_end - height\n                            }\n\n                            brush_field_group.attr("transform", `translate(0, ${new_y})`)\n                                .attr("data-y", new_y)\n\n                            par_coords.brushes[dimension][i][new_index] = [new_y, bottom_y]\n                            par_coords.brushed()\n                        })\n                    )\n\n                    let cancel_icon = attachCancelIcon(brush_field_group)\n                        .attr(\'visibility\', "hidden")\n                        .on(\'click\', () => {\n                            // console.log("deleting")\n                            par_coords.brushes[dimension][i][new_index] = null\n                            par_coords.brushed()\n                            brush_field_group.remove()\n                        })\n\n                    brush_field_group.on(\'mouseover\', (event) => {\n                        // console.log("hover")\n                        cancel_icon.attr(\'visibility\', \'visible\')\n                    })\n                    .on(\'mouseleave\', (event) => {\n                        // console.log("unhover")\n                        cancel_icon.attr(\'visibility\', \'hidden\')\n                    })\n\n                    _this.brush_field_being_built = brush_field_group\n                    _this.brush_field_being_built_bottom = brush_field_bottom\n\n                    par_coords.brushes[dimension][i].push([event.y, event.y])\n                    console.log(par_coords.brushes[dimension][i])\n\n                })\n                .on(\'drag\', (event, data) => {\n                    console.log("continuing drag", event.y)\n                    let brush_min = Math.min(brush_range[0], brush_range[1])\n                    let brush_max = Math.max(brush_range[0], brush_range[1])\n                    let top_y = parseInt(_this.brush_field_being_built.attr("data-y"))\n                    let height = event.y - top_y\n                    let event_y = Math.max(event.y, brush_min)\n                    console.log(event_y)\n                    if (height + top_y > brush_max) {\n                        height = brush_max - top_y\n                    }\n                    let field = _this.brush_field_being_built.select("rect")\n                    if (height > 0) {\n                        field.attr("height", height)\n                    } else {\n                        field.attr("height", Math.abs(height))\n                        _this.brush_field_being_built.attr("data-y", event_y)\n                        _this.brush_field_being_built.attr("transform", `translate(0, ${event_y})`)\n                        _this.brush_field_being_built_bottom.attr("y", height)\n                    }\n                    _this.brush_field_being_built_bottom.attr("y", Math.abs(height) - 8)\n                    let brush_index = parseInt(_this.brush_field_being_built.attr(\'data-i\'))\n                    let brush_y = parseInt(_this.brush_field_being_built.attr("data-y"))\n                    let brush_height = parseInt(field.attr("height"))\n                    let brush_bottom_y = brush_height + brush_y;\n                    par_coords.brushes[dimension][i][brush_index] = [brush_y, brush_bottom_y]\n                    // console.log(par_coords.brushes[dimension][i])\n                    par_coords.brushed()\n                })\n            )\n        })\n\n        src_select("#saveLogData").on("click", usageDataCollector.saveLogData)\n\n    }\n\n// Returns the path for a given data point.\n    path(data_point) {\n        let dimensions = this.dimensions;\n        let _this = this\n        let path = src_path();\n        let first_val = data_point[dimensions[0]]\n        let y_pos = this.y_position(first_val, dimensions[0])\n\n        path.moveTo(_this.x(dimensions[0]), y_pos)\n        dimensions.slice(1).map(function(dimension) {\n            let val = data_point[dimension];\n            let y_pos = _this.y_position.bind(_this)(val, dimension)\n            path.lineTo(_this.x(dimension), y_pos);\n        });\n        return path\n    }\n\n    y_position(domain_value, dimension) {\n        return this.mappers[dimension].map(domain_value)\n    }\n\n    highlight_ids(ids) {\n        this.highlighted.style("stroke", function(data_point) {\n            if (ids.length === 0) return standard_colour\n            if (ids.includes(data_point.id)) {\n                return highlight_colour\n            }\n            else {\n                return standard_colour\n            }\n        });\n    }\n\n    axisHover(extent, dimension) {\n        let selected = this.data.filter(data_point => {\n            let data_float = data_point[dimension]\n            return extent[0] <= data_float && data_float <= extent[1]\n        })\n        let selected_ids = selected.map(function (data_point) {\n            return data_point.id\n        })\n\n        this.highlight_ids(selected_ids)\n        if (this.other_plots) {\n            for (let plot of this.other_plots) {\n                plot.highlight_ids(selected_ids)\n            }\n        }\n    }\n\n    onClickAxis(extent, dim) {\n        console.log(extent, dim)\n        let current_index = this.selected_sub_axis[dim].indexOf(extent)\n        if (current_index === -1) {\n            this.selected_sub_axis[dim].push(extent)\n        } else {\n            this.selected_sub_axis[dim].splice(current_index, 1)\n        }\n        let selected_sub_axes = Object.entries(this.selected_sub_axis)\n\n\n        let selected = this.data.filter(data_point => {\n            return selected_sub_axes.every((tup) => {\n                let dim = tup[0]\n                let extents = tup[1]\n                if (extents.length === 0) {\n                    return true\n                }\n                return extents.some((extent) => {\n                    let data_float = data_point[dim]\n                    return extent[0] <= data_float && data_float <= extent[1]\n                })\n            })\n        })\n\n        var selected_ids = selected.map(function (data_point) {\n            return data_point.id\n        })\n        this.updateParCoords(selected_ids)\n        ;(0,usageDataCollector.logData)({\n            timestamp: Date.now(),\n            eventType : "brush",\n            eventDetails: {\n                "selected_sub_axes": selected_sub_axes,\n                "selected_ids": selected_ids\n            }\n        });\n    }\n\n    // Handles a brush event, toggling the display of foreground lines.\n    brushed() {\n        // console.log("brushed!")\n        let _this = this\n        // active_dimensions is a list of dimensions currently being filtered upon\n        let active_dimensions = this.dimensions.filter(function(dimension) {\n            return _this.brushes[dimension].some((axis) => {\n                let no_selection = axis.length === 0\n                let only_null_selection = axis.every((selection) => selection === null)\n                return !(no_selection || only_null_selection);\n            })\n        });\n\n        let extents = {}\n        active_dimensions.forEach(function(dimension) {\n            let dimension_selections = _this.brushes[dimension].map((axis_selections, index) => {\n                let axis_mapper = _this.mappers[dimension]\n                let dataspace_selections = axis_selections.filter((selection) => selection !== null).map(function (screenspace_selection) {\n                    let low = axis_mapper.map_inverse(screenspace_selection[0])\n                    let high = axis_mapper.map_inverse(screenspace_selection[1])\n                    return [low, high]\n                })\n                return dataspace_selections;\n            })\n            extents[dimension] = dimension_selections\n        });\n\n        // return the datapoints that are within the extents. It is only neccesary to be within one of the extents on an axis\n        let selected = this.data.filter(data_point => {\n            return active_dimensions.every((dimension, index) => {\n                return extents[dimension].some((axis) => {\n                    return axis.some((extent) => {\n                        if (extent === null) {\n                            return false\n                        }\n                        let data_float = data_point[dimension]\n                        return extent[1] <= data_float && data_float <= extent[0]\n                    })\n\n                })\n            })\n        })\n        let selected_ids = selected.map(function (data_point) {\n            return data_point.id\n        })\n        this.updateParCoords(selected_ids)\n        ;(0,usageDataCollector.logData)({\n            timestamp: Date.now(),\n            eventType : "brush",\n            eventDetails: {\n                extents: extents,\n                selected_ids: selected_ids\n            }\n        });\n    }\n\n    updateParCoords(selected_ids) {\n        // If the svg has not finished rendering for the first time yet, just return.\n        if (!this.foreground) {\n            return\n        }\n        this.foreground.style("display", function(data_point) {\n            if (selected_ids.length === 0) return \'none\'\n            if (selected_ids.includes(data_point.id)) {\n                return null\n            }\n            else {\n                return \'none\'\n            }\n        });\n\n        this.highlighted.style("display", function(data_point) {\n            if (selected_ids.length === 0) return \'none\'\n            if (selected_ids.includes(data_point.id)) {\n                return null\n            }\n            else {\n                return \'none\'\n            }\n        });\n    }\n\n    onHoverLine(mouse_event, data) {\n        src_select("#hoverBox")\n            .style("visibility", "visible")\n            .style("top", mouse_event.clientY + \'px\')\n            .style("left", mouse_event.clientX + 8 + \'px\')\n            .text(data.id)\n    }\n}\n\nfunction attachCancelIcon(container) {\n    let icon = container.append("g")\n        .attr("width", 5)\n        .attr("height", 5)\n        .attr("transform", `translate(${20}, ${0})`)\n    icon.append("circle")\n        .attr("fill", "#f44336")\n        .attr("r", 10)\n    icon.append("line")\n        .attr("stroke-width", 1)\n        .attr("stroke", "#fff")\n        .attr("x1", -5)\n        .attr("y1", -5)\n        .attr("x2", 5)\n        .attr("y2", 5)\n    icon.append("line")\n        .attr("stroke-width", 1)\n        .attr("stroke", "#fff")\n        .attr("x1", 5)\n        .attr("y1", -5)\n        .attr("x2", -5)\n        .attr("y2", 5)\n    return icon\n}\n\n\n\n;// CONCATENATED MODULE: ./src/plots/heatmap.js\n\n\nclass HeatMap {\n\n    constructor(container_ref, data, raw_mappers, selected_dimension) {\n        this.container_ref = container_ref\n        this.data = data\n        this.raw_mappers = raw_mappers\n        this.dimension = selected_dimension\n        this.init()\n    }\n\n    async init() {\n        // set the dimensions and margins of the graph\n        let margin = {top: 30, right: 30, bottom: 30, left: 30},\n            width = 450 - margin.left - margin.right,\n            height = 450 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        let svg = src_select(this.container_ref)\n            .append("svg")\n            .attr("width", width + margin.left + margin.right)\n            .attr("height", height + margin.top + margin.bottom)\n            .append("g")\n            .attr("transform",\n                "translate(" + margin.left + "," + margin.top + ")");\n\n        // Labels of row and columns\n        let xKeys = [], yKeys = [], max_value = 0\n        for (const row of this.data) {\n            let xKey = row["x"]\n            let yKey = row["y"]\n            let value = parseInt(row[this.dimension])\n            if (!xKeys.includes(xKey)) xKeys.push(xKey)\n            if (!yKeys.includes(yKey)) yKeys.push(yKey)\n            if (value > max_value) max_value = value\n        }\n\n        // Build X scales and axis:\n        let x = band()\n            .range([ 0, width ])\n            .domain(xKeys)\n            .padding(0);\n        svg.append("g")\n            .attr("transform", "translate(0," + height + ")")\n            .call(axisBottom(x))\n\n        // Build Y scales and axis:\n        let y = band()\n            .range([ height, 0 ])\n            .domain(yKeys)\n            .padding(0.01);\n        svg.append("g")\n            .call(axisLeft(y));\n\n        // create a tooltip\n        const tooltip = src_select(this.container_ref)\n            .append("div")\n            .style("opacity", 0)\n            .attr("class", "tooltip")\n            .style("background-color", "white")\n            .style("border", "solid")\n            .style("border-width", "2px")\n            .style("border-radius", "5px")\n            .style("padding", "5px")\n\n        // Three function that change the tooltip when user hover / move / leave a cell\n        const mouseover = function(event,d) {\n            tooltip.style("opacity", 1)\n        }\n        let value_row = this.dimension\n        const mousemove = (event, d) => {\n            tooltip\n                .html("The exact value of<br>this cell is: " + d[value_row])\n                .style("left", (event.x)/2 + "px")\n                .style("top", (event.y)/2 + "px")\n        }\n        const mouseleave = function(d) {\n            tooltip.style("opacity", 0)\n        }\n\n        // Build color scale\n        let myColor = sequential(viridis)\n            .domain([0, 1])\n\n        svg.selectAll("rect")\n            .data(this.data)\n            .enter()\n            .append("rect")\n            .attr("x", d => x(d.x))\n            .attr("y", d => y(d.y))\n            .attr("width", x.bandwidth() )\n            .attr("height", y.bandwidth() )\n            .style("fill", d => myColor(this.raw_mappers[value_row].map(d[value_row])))\n            .on("mouseover", mouseover)\n            .on("mousemove", mousemove)\n            .on("mouseleave", mouseleave)\n\n\n        //Title\n        svg.append("text")\n            .attr("x", 0)\n            .attr("y", -10)\n            .style("font-size", "22px")\n            .text("Geospatial heatmap " + this.dimension);\n    }\n\n}\n;// CONCATENATED MODULE: ./src/plots/choropleth.js\n\n\nclass Choropleth {\n\n    constructor(container_ref, data, raw_mappers, selected_dimension) {\n        this.container_ref = container_ref\n        this.init(data, raw_mappers, selected_dimension)\n    }\n\n    init(data, raw_mappers, dimension) {\n        // set the dimensions and margins of the graph\n        let margin = {top: 30, right: 30, bottom: 30, left: 30},\n            width = 1000 - margin.left - margin.right,\n            height = 800 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        let svg = src_select(this.container_ref)\n            .append("svg")\n            .attr("width", width + margin.left + margin.right)\n            .attr("height", height + margin.top + margin.bottom)\n            .append("g")\n            .attr("transform",\n                "translate(" + margin.left + "," + margin.top + ")");\n\n        // create a tooltip\n        const tooltip = src_select(this.container_ref)\n            .append("div")\n            .style("opacity", 0)\n            .attr("class", "tooltip")\n            .style("background-color", "white")\n            .style("border", "solid")\n            .style("border-width", "2px")\n            .style("border-radius", "5px")\n            .style("padding", "5px")\n\n        let mouseOver = function(d) {\n            src_select(this)\n                .transition()\n                .duration(200)\n                .style("opacity", 1)\n            tooltip.style("opacity", 1)\n        }\n\n        const mouseMove = function(event,d) {\n            tooltip\n                .html("The " + dimension + " of<br>" + d.properties["name"] + " is: " + d.value)\n                .style("left", (event.x)/2 + "px")\n                .style("top", (event.y)/2 + "px")\n        }\n\n        let mouseLeave = function(d) {\n            src_selectAll(".Country")\n                .transition()\n                .duration(200)\n                .style("opacity", .7)\n                .style("stroke", null)\n            tooltip.style("opacity", 0)\n        }\n        // Color scale\n        const colorScale = sequential(viridis)\n            .domain([0, 1])\n\n        let country_to_index = {}\n        for (let i in data) {\n            const row = data[i]\n            const iso_code = row["code"]\n            country_to_index[iso_code] = parseInt(i)\n        }\n        // Load external data and boot\n        Promise.all([\n            json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson"), []\n        ]).then(function(loadData){\n            let topo = loadData[0]\n            topo.features = topo.features.filter(shape => shape.id !== "ATA")\n\n            // Projection and size\n            const projection = mercator()\n                .fitSize([width, height], topo)\n                .center([0, 20]);\n\n            // Draw the map\n            svg.selectAll("path")\n                .data(topo.features)\n                .join("path")\n                // draw each country\n                .attr("d", path()\n                    .projection(projection)\n                )\n                // set the color of each country\n                .attr("fill", function (d) {\n                    if (!(d.id in country_to_index)) {\n                        console.log("Couldn\'t find " + d.id + " in index map")\n                        return 0\n                    }\n                    let country_index = country_to_index[d.id]\n                    d.value = data[country_index][dimension] || 0;\n                    return colorScale(raw_mappers[dimension].map(d.value));\n                })\n                .style("stroke", "transparent")\n                .attr("class", function(d){ return "Country" } )\n                .style("opacity", .8)\n                .on("mouseover", mouseOver )\n                .on("mousemove", mouseMove)\n                .on("mouseleave", mouseLeave )\n        })\n    }\n}\n\n\n;// CONCATENATED MODULE: ./src/plots/lollipop.js\n\n\n\n\nclass Lollipop {\n    constructor(container_ref, data, dimension, raw_mapper) {\n        let container = document.querySelector(container_ref)\n        let plot = document.createElement("div")\n        plot.classList.add("lollipop")\n        plot.id = "plot_id_" + esm_browser_v4()\n        this.id = "#" + plot.id\n        container.appendChild(plot)\n\n        let buffer_size = 20;\n        let margin = {top: 24, right: 48, bottom: 16, left: 48};\n        let width = plot.clientWidth - margin.left - margin.right;\n        let height = plot.clientHeight - margin.top - margin.bottom;\n        let screen_mapper = new ScreenMapper(raw_mapper.get_output_space_ranges(), [height, 0], buffer_size)\n        let mapper = new CompositeMapper([raw_mapper, screen_mapper])\n\n        // append the svg object to the body of the page\n        const svg = src_select(this.id).append("svg").attr("class", "lollipopSvg")\n            .append("g")\n            .attr("transform", `translate(${margin.left},${margin.top})`);\n\n\n        // Add X axes\n        const x = band()\n            .range([ 0, width ])\n            .domain(data.map(function(d) { return d.id; }))\n            .padding(1);\n        let axis_groups_x = svg.append("g")\n            // .attr("transform", `translate(0, ${height})`)\n            .attr("class", "axis_group_x")\n\n        let axes_x = axis_groups_x.selectAll(".x_axis")\n            .data(mapper.get_input_space_ranges())\n            .enter().append("g")\n            .attr("class", "x_axis")\n            .attr("transform", (range) => {\n                return `translate(0, ${mapper.map(range[0])})`\n            }).each(function (range, index) {\n                if (index === 0) {\n                    src_select(this).call(axisBottom(x))\n                } else {\n                    src_select(this).call(axisBottom(x).tickValues([]))\n                }\n\n            })\n            .selectAll("text")\n            .attr("transform", "translate(-10,0)rotate(-45)")\n            .style("text-anchor", "end");\n\n        // Add Y axes\n        let axis_group_y = svg.append("g")\n            .attr("class", "axis_group_y")\n            .attr("transform", "translate(0)")\n\n        axis_group_y.append("text")\n            .style("text-anchor", "middle")\n            .style("font-weight", 400)\n            .style("overflow", "visible")\n            .attr("y", -8)\n            .text(dimension);\n\n        let axes_y = axis_group_y.selectAll(".y_axis")\n            .data((d) => {\n                return mapper.get_input_space_ranges()\n            })\n            .enter().append("g")\n            .attr("class", "y_axis")\n            .each(function (range, index) {\n                let screen_range = mapper.get_output_space_ranges()[index]\n                let input_ranges = mapper.get_input_space_ranges()\n                let tick_values = []\n                if (index === 0) {\n                    tick_values = range;\n                } else if (index === input_ranges.length - 1) {\n                    tick_values = [range[1]];\n                } else {\n                    tick_values = [range[1]];\n                }\n                let input_scale = range\n                let output_scale = screen_range\n                let d3_scale = linear_linear().domain(input_scale).range(output_scale)\n                src_select(this).call(axisLeft().scale(d3_scale).tickValues(tick_values).tickSize(15));\n            })\n\n        // Lines\n        svg.selectAll("lollipopLine")\n            .data(data)\n            .enter()\n            .append("line")\n            .attr("x1", function(d) { return x(d.id); })\n            .attr("x2", function(d) { return x(d.id); })\n            .attr("y1", function(d) { return mapper.map(d[dimension]); })\n            .attr("y2", mapper.map(mapper.get_input_space_ranges()[0][0]))\n            .attr("stroke", "grey")\n\n        // Circles\n        svg.selectAll("mycircle")\n            .data(data)\n            .join("circle")\n            .attr("cx", function(d) { return x(d.id); })\n            .attr("cy", function(d) { return mapper.map(d[dimension]); })\n            .attr("r", "4")\n            .style("fill", "#69b3a2")\n            .attr("stroke", "black")\n    }\n\n\n}\n;// CONCATENATED MODULE: ./src/ui/chart_selection.js\n\n\n\n\n\n\nconst chart_selector_ref = "#chart-select";\n\nlet chart_selection_map = {\n    spc: (chart_container_ref, data, dimensions, mappers) => {\n        let spc = new SPC(chart_container_ref, data, dimensions, mappers)\n        spc.draw()\n    },\n    heatmap: (chart_container_ref, data, dimensions, mappers) => {\n        // let data_selector = document.querySelector(data_selector_ref)\n        // if (!data_selector.value.toString().includes("heatmap")) {\n        //     data_selector.selectedIndex = 2\n        //     update_data_set().then(() => {\n        //         new HeatMap(chart_container_ref, data_source.data, data_source.mappers, selected_dimension)\n        //     })\n        // } else {\n        //     new HeatMap(chart_container_ref, arg_data_source.data, arg_data_source.mappers, arg_selected_dimension)\n        // }\n        new HeatMap(chart_container_ref, data, mappers, dimensions[0])\n    },\n    choropleth: (chart_container_ref, data, dimensions, mappers) => {\n        new Choropleth(chart_container_ref, data, mappers, dimensions[0])\n    },\n    lollipop: (chart_container_ref, data, dimensions, mappers) => {\n        new Lollipop(chart_container_ref, data, dimensions[0], mappers[dimensions[0]])\n    }\n}\n\nfunction get_selected_chart() {\n    return chart_selection_map[src_select(chart_selector_ref).property("value")]\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\nconsole.log("starting")\n\nconst chart_container_ref = "#plot_container_id";\nlet src_data, dimensions, sorted_data, selected_dimensions, mappers, selected_chart_generator\n\nfunction select_chart() {\n    document.querySelector(chart_container_ref).innerHTML = ""\n    selected_chart_generator = get_selected_chart()\n    selected_chart_generator(chart_container_ref, src_data, selected_dimensions, mappers)\n}\n\nfunction select_algorithm() {\n    let {algo, arguments_id, read_args} = get_selected_algorithm()\n    algorithm_selection_update(arguments_id)\n    let args = read_args()\n    mappers = {}\n    for (let dimension of dimensions) {\n        mappers[dimension] = algo(sorted_data[dimension], args, dimension)\n    }\n}\n\nfunction select_dimensions() {\n    selected_dimensions = get_selected_dimensions()\n}\n\nasync function select_data() {\n    let selected_data = await get_selected_data()\n    src_data = selected_data.data\n    dimensions = selected_data.dimensions\n    sorted_data = selected_data.sorted_data\n\n    set_up_dimensions_selector(dimensions)\n}\n\nwindow.select_chart = () => {\n    select_chart()\n}\n\nwindow.select_algorithm = () => {\n    select_algorithm();\n    select_chart();\n}\n\nwindow.select_dimensions = () => {\n    select_dimensions();\n    select_algorithm();\n    select_chart();\n}\n\nwindow.select_data = async () => {\n    await select_data();\n    select_dimensions();\n    select_algorithm();\n    select_chart();\n}\n\nwindow.on_recompute_button = () => {\n    select_algorithm();\n    select_chart();\n}\n\n\nasync function src_init() {\n    await select_data();\n    select_dimensions();\n    select_algorithm();\n    select_chart();\n}\n\nsrc_init()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///698\n')},289:module=>{eval("const data = []\n\nfunction logData(props) {\n    let logId = data.length + 1;\n    props.logId = logId;\n    data.push(props);\n}\n\nfunction saveLogData() {\n    let writeable = JSON.stringify(data);\n    const logFile = new File([`${writeable}`], 'logData.json');\n\n// Download it using our function\n    downloadFile(logFile);\n}\n\nfunction downloadFile(file) {\n    // Create a link and set the URL using `createObjectURL`\n    const link = document.createElement('a');\n    link.style.display = 'none';\n    link.href = URL.createObjectURL(file);\n    link.download = file.name;\n\n    // It needs to be added to the DOM so it can be clicked\n    document.body.appendChild(link);\n    link.click();\n\n    // To make this work on Firefox we need to wait\n    // a little while before removing it.\n    setTimeout(() => {\n        URL.revokeObjectURL(link.href);\n        link.parentNode.removeChild(link);\n    }, 0);\n}\n\nmodule.exports = {\n    logData, saveLogData\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg5LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxVQUFVOztBQUUzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGF2aXpwcm9qZWN0MjAyMi8uL3NyYy91c2FnZURhdGFDb2xsZWN0b3IuanM/NTI5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYXRhID0gW11cblxuZnVuY3Rpb24gbG9nRGF0YShwcm9wcykge1xuICAgIGxldCBsb2dJZCA9IGRhdGEubGVuZ3RoICsgMTtcbiAgICBwcm9wcy5sb2dJZCA9IGxvZ0lkO1xuICAgIGRhdGEucHVzaChwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHNhdmVMb2dEYXRhKCkge1xuICAgIGxldCB3cml0ZWFibGUgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICBjb25zdCBsb2dGaWxlID0gbmV3IEZpbGUoW2Ake3dyaXRlYWJsZX1gXSwgJ2xvZ0RhdGEuanNvbicpO1xuXG4vLyBEb3dubG9hZCBpdCB1c2luZyBvdXIgZnVuY3Rpb25cbiAgICBkb3dubG9hZEZpbGUobG9nRmlsZSk7XG59XG5cbmZ1bmN0aW9uIGRvd25sb2FkRmlsZShmaWxlKSB7XG4gICAgLy8gQ3JlYXRlIGEgbGluayBhbmQgc2V0IHRoZSBVUkwgdXNpbmcgYGNyZWF0ZU9iamVjdFVSTGBcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxpbmsuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlLm5hbWU7XG5cbiAgICAvLyBJdCBuZWVkcyB0byBiZSBhZGRlZCB0byB0aGUgRE9NIHNvIGl0IGNhbiBiZSBjbGlja2VkXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICBsaW5rLmNsaWNrKCk7XG5cbiAgICAvLyBUbyBtYWtlIHRoaXMgd29yayBvbiBGaXJlZm94IHdlIG5lZWQgdG8gd2FpdFxuICAgIC8vIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSByZW1vdmluZyBpdC5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChsaW5rLmhyZWYpO1xuICAgICAgICBsaW5rLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgfSwgMCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGxvZ0RhdGEsIHNhdmVMb2dEYXRhXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///289\n")}},__webpack_module_cache__={};function __webpack_require__(n){var I=__webpack_module_cache__[n];if(void 0!==I)return I.exports;var g=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](g,g.exports,__webpack_require__),g.exports}var __webpack_exports__=__webpack_require__(698)})();